<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java基础教程(二)对象与类</title>
      <link href="2021/04/10/java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B(%E4%BA%8C)%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/"/>
      <url>2021/04/10/java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B(%E4%BA%8C)%E5%AF%B9%E8%B1%A1%E4%B8%8E%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>因为自身java基础薄弱，故决定在闲暇时期，学习一下java基础相关，顺便做成笔记，供需要的人学习</p></blockquote><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><blockquote><p>因为有时候会涉及到程序书写，故需要建立一个项目以备使用，当然了，我们直接使用现在最流行最好用的springboot项目即可。不会新建项目的请移步 <a href="https://blog.csdn.net/wzp12321/article/details/86007848">一、创建第一个springboot项目</a>，该文章有详细步骤。</p></blockquote><hr><h3 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h3><blockquote><p>面向对象程序设计– oop 是当今主流的程序设计泛型，面向对象的程序是由对象组成的，每个对象包含对用户公开的功能部分以及隐藏的实现部分。当然了，在oop中，不需要关心对象的具体实现。</p></blockquote><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><blockquote><p>类是构造对象的模板，由类构造对象的过程称之为创建类的实例。</p><p>封装是将数据和行为组合在一起，并对对象的使用者隐藏数据的实现方式。对象中的数据称为实例域，操纵数据的过程称为方法，实现封装的关键在于绝对不能让类中的方法直接的访问其他类的实例域。</p><p>可以扩展一个类来建立另一个新的类。</p></blockquote><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><blockquote><p>对象的三大特征：</p><ul><li>行为 — 对象的行为是用可调用的方法定义的</li><li>状态 — 每个对象都保存着描述当前特征的信息</li><li>标识 — 每个对象多有着唯一的身份</li></ul><p>对象的三大特性相互影响。</p></blockquote><h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><blockquote><p>在类之间，最常见的有聚合关系，依赖关系，继承关系。</p></blockquote><h3 id="使用预定义类"><a href="#使用预定义类" class="headerlink" title="使用预定义类"></a>使用预定义类</h3><h4 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h4><blockquote><p>要想使用对象，就必须先构造对象，并指定其初始状态，当然了，我们在java中使用构造器来构造新的实例。构造器的名字应该与类名相同，但我们通常希望构造的对象可以多次使用，于是我们声明一个变量，将对象存放于变量中。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Date(); <span class="comment">// 构造Date对象并初始化</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wznanfang/image@main/blog/202103/22/115941-15769.png" alt="image-20210322115939042"></p><blockquote><p><code>注意：</code></p><p>单独定义的对象变量，不是对象，实际上也未引用对象。只能初始化赋值或者引用一个已存在的对象。</p><p>一个对象变量只是引用了一个对象。</p><p>任何对象变量的值都是对存储在另外一个地方的一个对象的引用，包括new操作符的返回值也是一个引用。</p></blockquote><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><h4 id="从构造器开始"><a href="#从构造器开始" class="headerlink" title="从构造器开始"></a>从构造器开始</h4><blockquote><p>构造器与类同名，且总是伴随着new操作符的执行被调用，而不能对一个已存在的对象调用构造器来达到重新设置实例域的目的</p><p><code>注意：</code></p><ul><li>构造器与类同名</li><li>每个类可以有一个及其以上的构造器</li><li>构造器可以有零个、一个或者多个参数</li><li>构造器没有返回值</li><li>总伴随着 new 操作符一起调用</li></ul></blockquote><h4 id="隐式参数与显式参数"><a href="#隐式参数与显式参数" class="headerlink" title="隐式参数与显式参数"></a>隐式参数与显式参数</h4><blockquote><p>显式参数是明显的列在方法声明中的，而隐式参数使用关键字this表示。</p></blockquote><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote><p>封装是指一种将抽象性函式接口的实现细节部分包装、隐藏起来的方法。封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p><p>封装的优点：</p><ul><li>良好的封装能够减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员变量进行更精确的控制</li><li>隐藏信息，实现细节</li></ul></blockquote><h5 id="实现封装的步骤"><a href="#实现封装的步骤" class="headerlink" title="实现封装的步骤"></a>实现封装的步骤</h5><blockquote><ol><li>修改属性的可见性来限制对属性的访问（一般限制为private）,如下：将name和age的属性设置为私有的，只能本类才能访问</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注： 使用this关键字是为了解决实例变量和局部变量命名冲突</span></span><br></pre></td></tr></table></figure><h4 id="类的访问权限"><a href="#类的访问权限" class="headerlink" title="类的访问权限"></a>类的访问权限</h4><blockquote><p>方法可以访问所调用对象的私有数据，一个方法可以访问所属类的所有对象的私有数据。</p></blockquote><h4 id="final实例域"><a href="#final实例域" class="headerlink" title="final实例域"></a>final实例域</h4><blockquote><p>我们可以将实例域定义为final，当然了，在构建对象时必须初始化这样的域，即确保在每一个构造器执行后，域的值就被设定，在后续的使用中也不会再被更改。</p><p>final修饰符大多应用于基本类型域中，或者不可变类域中（如果类中的所有方法都不会改变其对象，则该类被称为不可变类）</p></blockquote><h3 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h3><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><blockquote><p>在一个类中，我们可以定义多个方法。如果有一系列方法，它们的功能都是类似的，只有参数有所不同，那么，可以把这一组方法名做成同名方法。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种方法名相同，但各自的参数不同，称为方法重载（<code>overload</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 无参构造</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">很多类都包含一个无参数的构造函数，对象由无参构造函数创建时，其状态会设置为适当的默认值。例如：以下是person的无参构造函数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public people()&#123;</span><br><span class="line">   name &#x3D; &quot;&quot;;</span><br><span class="line">   age &#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果在编写一个类时，没有编写构造器，则系统会提供一个无参构造器，这个构造器将所有的实例域设置为默认值。数值型数据设置为0，布尔型数据设置为false，所有对象变量将设置为null。</p><p>如果类中提供了至少一个有参构造，但是未提供无参构造，则在构造对象时如果未提供参数就会抛出错误视为不合法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java教程(一)基本程序设计结构</title>
      <link href="2021/03/15/java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B(%E4%B8%80)%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/"/>
      <url>2021/03/15/java%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B(%E4%B8%80)%E5%9F%BA%E6%9C%AC%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>因为自身java基础薄弱，故决定在闲暇时期，学习一下java基础相关，顺便做成笔记，供需要的人学习</p></blockquote><h4 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h4><blockquote><p>因为有时候会涉及到程序书写，故需要建立一个项目以备使用，当然了，我们直接使用现在最流行最好用的springboot项目即可。不会新建项目的请移步 <a href="https://blog.csdn.net/wzp12321/article/details/86007848">一、创建第一个springboot项目</a>，该文章有详细步骤。</p></blockquote><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p>我们都知道java是一种强类型语言，意味着每一个变量对应了一种类型，而java中，有8种基本类型——4种整型，2种浮点类型，1种字符类型，1种布尔类型。</p></blockquote><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><blockquote><p>整型用于表示没有小数部分的数值，可以为负数。分别是：int，short，long，byte。</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">4字节</td><td align="center">-2147483648~2148473647</td></tr><tr><td align="center">short</td><td align="center">2字节</td><td align="center">-32768~32767</td></tr><tr><td align="center">long</td><td align="center">8字节</td><td align="center">-9223372036854775808~9223372036854775807</td></tr><tr><td align="center">byte</td><td align="center">1字节</td><td align="center">-128~127</td></tr></tbody></table><h4 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h4><blockquote><p>浮点类型用于表示有小数部分的数值。分别是：float，double。</p></blockquote><table><thead><tr><th align="center">类型</th><th align="center">存储需求</th><th align="center">取值范围</th></tr></thead><tbody><tr><td align="center">float</td><td align="center">4字节</td><td align="center">大约±3.40282347E+38F(有效位数为6-7位)</td></tr><tr><td align="center">double</td><td align="center">8字节</td><td align="center">大约±1.79769313486231570E+308(有效位数为15位)</td></tr></tbody></table><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><blockquote><p>char类型用于表示单个字符，通常用来表示字符常量。</p></blockquote><h4 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h4><blockquote><p>Boolean类型有两个值：true和false，用来判定逻辑条件。</p><p><code>注意：整型值和布尔值之间不能进行相互转换</code></p></blockquote><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>在java中，每一个变量都属于一种类型，在声明变量时，变量所属类型位于变量名之前。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">string b;</span><br><span class="line"><span class="keyword">double</span> c;</span><br></pre></td></tr></table></figure><blockquote><p><code>注意：</code></p><ul><li>变量名的长度没有限制</li><li>不能将变量名命名为java的保留字</li><li>变量名必须以字母开头</li><li>变量名对大小写敏感</li></ul></blockquote><h4 id="变量初始化"><a href="#变量初始化" class="headerlink" title="变量初始化"></a>变量初始化</h4><blockquote><p>声明一个变量后，必须用赋值语句对变量进行显式初始化。例如下面的代码将会报错：variable not initiaized</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><blockquote><p>赋值有两种办法，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><blockquote><p>在java中，使用关键字final表示常量，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> A = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><blockquote><p>关键字final修饰的变量只能被赋值一次，一旦赋值就再也不能更改了，并且在书写习惯上，常量名使用大写的形式。</p><p>在java中，如果我们希望某一个常量可以在很多的类中使用，则将这些常量称为类常量，使用关键字 static final 设置。例如:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> B = <span class="number">4</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>注意：</code></p><ul><li>类常量的定义位于main方法外</li><li>如果类常量被声明为public，则其他类的方法也可以使用该常量</li></ul></blockquote><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><blockquote><p>java中也有运算，加减乘除分别用 <code>+-*/</code>表示。只是需要注意以下几点：</p><ul><li>参与<code>/</code>运算的两个操作数都是整数时，则表示整数除法，否则表示为浮点数除法</li><li>整数的求余（取模）用%号表示。例如：15/2=7，而15%2=1，15.0/2=7.5</li><li>整数被0除将会产生异常，而浮点数被0除将会得到无穷大或者NaN的结果</li></ul></blockquote><h4 id="自增运算符与自减运算符"><a href="#自增运算符与自减运算符" class="headerlink" title="自增运算符与自减运算符"></a>自增运算符与自减运算符</h4><blockquote><p>n++是将变量n的当前值加+1，n–是将变量n的当前值-1。这是属于后缀方式，还有一种前缀方式，例如++n。两种方式都是对变量值+1。他们的区别在于一个是先加再计算，一个是先计算再加。</p><p>例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span> * a++ <span class="comment">//此时的 b = 2，a=2</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">2</span> * ++b <span class="comment">//此时的 c = 4，a=2</span></span><br></pre></td></tr></table></figure><h4 id="关系运算符和Boolean运算符"><a href="#关系运算符和Boolean运算符" class="headerlink" title="关系运算符和Boolean运算符"></a>关系运算符和Boolean运算符</h4><blockquote><p>java中包含的运算符如下：</p><ul><li>== 表示等于</li><li>！=表示不等于</li><li>另外还有数学上常见的 &lt;(小于)，&gt;(大于)，&lt;=(小于等于)，&gt;=(大于等于)</li><li>用&amp;&amp;表示逻辑 “与”，用||表示逻辑“或”，用！表示逻辑“非”</li></ul><p>而上述的关系运算符最终都会产生一个结果，用true或者false表示，通常用于if等判断中。java还支持三元操作符 ？:，例如：1 &gt; 2 ? 1 : 2，即如果1&gt;2为true则返回1，如果为false则返回2。</p></blockquote><h4 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h4><blockquote><p>程序运行时，经常会使用到类型转换，下图给出了数值类型的合理转换，其中五个蓝色箭头代表数据转换不会出现精度丢失，三个橙色箭头代表可能存在精度丢失的情况。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/wznanfang/image@main/blog/202103/16/122950-873815.png" alt="image-20210316122949301"></p><blockquote><p><code>注意：</code></p><ul><li>如果两个操作数中有一个是double，类型，另一个也会被转换为double类型</li><li>如果其中一个是float类型，则另一个也会被转换为float类型</li><li>如果其中一个是long类型，则另一个也会被转换为long类型</li><li>如果均不满足上述条件，则均被转换为int类型</li></ul></blockquote><h4 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h4><blockquote><p>强制类型转换的语法格式是在圆括号中给出想要转换的目标类型，后面紧跟待转换的变量名。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> a = <span class="number">9.997</span>;</span><br><span class="line"><span class="keyword">int</span> b = (<span class="keyword">int</span>) a; <span class="comment">//此时的变量 b 的值为9</span></span><br></pre></td></tr></table></figure><p>如果想对浮点数进行舍入运算，则需要使用 Math.round()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> b = <span class="number">9.97</span>;</span><br><span class="line"><span class="keyword">int</span> c = (<span class="keyword">int</span>)Math.round(b) <span class="comment">//此时的变量c 值为10</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h4><blockquote><p>枚举类型多适用于变量取值在一个有限的集合内，即结果是固定的几个值之一。</p></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><blockquote><p>从概念上来讲，java字符串就是unicode字符序列。java没有内置的字符串类型，而是遭java类库中提供了一个预定义类，很自然的就叫String，每一个用双引号括起来的字符串都是String类的一个实例。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;1&quot;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>字符串的常用API文档，包括后面的字符串构建的API文档，请自行搜索jdk文档相关</p></blockquote><h4 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h4><blockquote><p>String类的substring方法可以从一个较大的字符串提取出一个子串。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;123456789&quot;</span>;</span><br><span class="line">String b = a.substring(<span class="number">0</span>,<span class="number">3</span>); <span class="comment">//意思是从字符串a的下标0开始截取。一共截取三位，即变量b的值为 “123”</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h4><blockquote><p>java语言允许使用 + 号拼接两个字符串。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">String c = a + b; <span class="comment">//此时 c 的值为 “12”</span></span><br></pre></td></tr></table></figure><blockquote><p>当将一个字符串和一个非字符串的值进行拼接时，非字符串会被转变为字符串。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">Integer b = <span class="number">2</span>;</span><br><span class="line">String c = a + b; <span class="comment">//此时 c 的值为 “12”</span></span><br></pre></td></tr></table></figure><h4 id="字符串不可变"><a href="#字符串不可变" class="headerlink" title="字符串不可变"></a>字符串不可变</h4><blockquote><p>String类并未提供修改字符串的方法，如果我们要修改某一字符串的内容，我们只能截取我们需要的那一部分然后再拼接我们想要的那一部分，亦或者使用 String的replace方法。</p><p>因为不能对字符串的字符进行修改，所以java文档中对String类对象称之为不可变字符串。</p></blockquote><h4 id="检测字符串是否相等"><a href="#检测字符串是否相等" class="headerlink" title="检测字符串是否相等"></a>检测字符串是否相等</h4><blockquote><p>在java中可以使用 equals()方法检测两个字符串是否相等。表达式为： a.equals(b)，如果相等则结果为 true，不相等的结果为 false。</p><p>如果想要比较两个字符串是否相等却忽略大小写，则使用equalsIgnoreCase()方法。</p><p><code>注意：</code> </p><ul><li>比较的字符串 a和b可以是变量亦可以是常量。</li><li>不要使用 == 运算符比较两个字符串是否相等。</li></ul></blockquote><h4 id="空串与null串"><a href="#空串与null串" class="headerlink" title="空串与null串"></a>空串与null串</h4><blockquote><p>空串 “”是长度为0的字符串，即长度为0，内容为空。当然了，String变量还可以存放一个特殊的值 null，表示目前没有任何对象与该变量关联。如果要检测一个字符串不为null和不为空，则条件为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str != <span class="keyword">null</span> &amp;&amp; str.length()!=<span class="number">0</span>) <span class="comment">//前者判断字符串 str 是否为空 ，后者判断字符串str的长度是否为0</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="构建字符串"><a href="#构建字符串" class="headerlink" title="构建字符串"></a>构建字符串</h4><blockquote><p>在java中采用StringBuilder构建我们需要的字符串。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">stringBuilder.append(<span class="string">&quot;heello&quot;</span>);</span><br><span class="line">stringBuilder.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">stringBuilder.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">stringBuilder.append(<span class="string">&quot;！&quot;</span>);</span><br><span class="line">System.out.println(stringBuilder.toString()); <span class="comment">//此时的 stringBuilder 值为 “heello,world！”</span></span><br></pre></td></tr></table></figure><h3 id="程序控制流程"><a href="#程序控制流程" class="headerlink" title="程序控制流程"></a>程序控制流程</h3><blockquote><p>在java中，使用条件语句和循环结构控制程序流程。</p></blockquote><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><blockquote><p>条件语句的格式为：if(condition) {statement }，条件位于括号内，而执行语句也可以是多条。当然了，条件语句还有加上 else 的写法：if(condition){statement1;statement2}else{statement3}，如果是多个if后面跟着一个 else ，则else与最近的if组成一组。例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种纯 if 写法  此时输出结果是 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="number">2</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二种带else的写法 此时输出结果是 1</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">2</span>&lt;<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="number">2</span>); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第三种多个if写法  此时输出结果是 2 2</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><blockquote><p>当条件为 true时，while循环执行一条语句或者一个语句块，格式为：while(condition){statement}，如果最开始的判断条件就是false，则语句块一次也不执行。因为while循环语句首先检测循环条件，所以循环体有可能不被执行，如果你希望循环体至少执行一次则使用 do {statement}while(condition)。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时的while会一直循环执行下去，不间断的输出 2</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">2</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">    System.out.println(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//此时只会输出一个 1</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">2</span> &lt; <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><blockquote><p>for 循环是支持迭代的一种通用结构，利用每次迭代后更新的计数器或者变量来控制迭代次数。</p><p>格式如下：第一部分是初始化变量，第二部分是检测条件，第三部分是对变量进行更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在for循环内部定义了变量，则不能在for循环外使用，如要在for循环外部使用循环计数器的最终值，则需要在外部先定义该变量。例下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure></blockquote><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><blockquote><p>这个是为了方便进行多重条件判断的，如果单纯的使用if/else，则会显得代码很臃肿，switch语句格式如下：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>switch 语句将从选项值相匹配的case标签开始执行。直到遇到break语句，或者执行到switch语句结束为止，如果没有一个case匹配，且有default子句，则执行该子句。</p><p><code>注意：</code></p><ul><li>case 标签的类型可以是char，byte，short，int(或者他们对应的包装类)，枚举常量，字符串以及字面量(从java7开始)</li></ul></blockquote><h4 id="循环中断"><a href="#循环中断" class="headerlink" title="循环中断"></a>循环中断</h4><blockquote><p>在循环程序中，我们有时候会在循环满足某一个条件时，就跳过或者结束循环，即break和continue；他们的区别是：break会直接结束循环，而continue会跳过当前循环的剩余部分，直接到下一个循环</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此时只会输出 1 2 3 4</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>;t&lt;<span class="number">10</span>;t++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时会输出 1 2 3 4 6 7 8 9</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>;t&lt;<span class="number">10</span>;t++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>数组是一种数据结构，用来存储同一类型值得集合，通过一个整型下标(下标从0开始)可以访问数组中的每一个值。在声明数组变量时，需要指明数组类型，和数组变量的名字。数组一旦创建，则大小就不会再被改变。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明数组的方式有以下两种，但是我们一般喜欢使用第一种</span></span><br><span class="line"><span class="keyword">int</span> [] a;</span><br><span class="line"><span class="keyword">int</span> a [];</span><br><span class="line"><span class="comment">//创建一个可以存储10个int类型整数的数组</span></span><br><span class="line"><span class="keyword">int</span> [] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><h4 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h4><blockquote><p>for循环的增强型，语句格式为：for(u:c){statement}，此类循环会遍历数组中的每一个元素，而不需要使用下标。</p></blockquote><h4 id="数组初始化以及匿名数组"><a href="#数组初始化以及匿名数组" class="headerlink" title="数组初始化以及匿名数组"></a>数组初始化以及匿名数组</h4><blockquote><p>java提供了一种创建数组对象并同时赋值的简化书写方式：int [] a = {1,2,3,4,5}; 甚至可以初始化匿名数组：new int []{1,2,3,4,5}; 这种写法可以在不创建新变量的情况下重新初始化一个数组。</p><p>在java中，数组的长度允许为0，所以需要注意区分null和0。</p></blockquote><h4 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h4><blockquote><p>在java中允许将一个数组变量拷贝给另一个数组变量，此时两个变量将引用同一个数组。如果希望将一个数组的所有值都拷贝到一个新的数组，则使用Arrays的copyOf() 方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] c = Arrays.copyOf(a, <span class="number">10</span>); <span class="comment">//第一个参数是 被拷贝数组，第二个参数是新数组的长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b : c) &#123;</span><br><span class="line">    System.out.println(b); <span class="comment">//此时输出值分别是：1 2 3 4 5 0 0 0 0 0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h4><blockquote><p>对数值型的数值进行排序，则使用Arrays类中的sort() 方法。该方法使用了优化后的快速排序法。</p><p>常见的还有返回数组中数据元素的字符串方法：Arrays.toString()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] c = Arrays.copyOf(a, <span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(c)); <span class="comment">// 此时输出为： [1, 5, 4, 3, 2, 0, 0, 0, 0, 0]</span></span><br><span class="line">Arrays.sort(c);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b : c) &#123;</span><br><span class="line">    System.out.println(b); <span class="comment">// 此时的输出值为：0 0 0 0 0 1 2 3 4 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><blockquote><p>多维数组使用多个下标访问数组元素，适用于表格或者更加复杂的排列形式。</p><p>在java中声明一个二维数组的格式为： int [] [] a ; 想要快速打印一个二维数组的数据元素列表，则使用Arrays.deepToString()方法，例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] i = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;, &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;&#125;;</span><br><span class="line">System.out.println(Arrays.deepToString(i)); <span class="comment">// 此时输出值为：[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]</span></span><br></pre></td></tr></table></figure><hr><p>基本程序设计结构篇章到此结束，下一篇将学习 <strong>对象与类</strong> </p>]]></content>
      
      
      <categories>
          
          <category> java基础教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决github图床问题</title>
      <link href="2021/01/30/%E8%A7%A3%E5%86%B3github%E5%9B%BE%E5%BA%8A%E9%97%AE%E9%A2%98/"/>
      <url>2021/01/30/%E8%A7%A3%E5%86%B3github%E5%9B%BE%E5%BA%8A%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>年关已近，烟花将开</p><p>—— 南风落尽</p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>天气好像越来越好了？很奇怪，温度竟然升高了许多，前段时间的几度，现在的十几度，虽然还是有些许的冷，但天可怜见，连续出了半个月的太阳，虽然今日太阳不见，但已无伤大雅……</p></blockquote><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><blockquote><p>上一篇文章在讲md格式的书写时，截取了很多图，我是用的github做的图床(虽然曾今是用的gitee，但是耐不住github它容量没有限制呀)，然后就导致了一个问题，那就是图片上传后竟然不能访问，至于为啥不能访问，原因大家都明白，可是看不了图片的问题总得解决呀，然后就网上搜各种解决办法……</p></blockquote><h3 id="办法"><a href="#办法" class="headerlink" title="办法"></a>办法</h3><h4 id="解决自己看不了图片的方法"><a href="#解决自己看不了图片的方法" class="headerlink" title="解决自己看不了图片的方法"></a>解决自己看不了图片的方法</h4><blockquote><p>如果你的电脑是Windows系统，那么可以打开<code>C:\Windows\System32\drivers\etc</code>文件夹，然后打开hosts文件，在其文末追加以下内容即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># GitHub Start </span><br><span class="line">192.30.253.112    Build software better, together </span><br><span class="line">192.30.253.119    gist.github.com</span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line"></span><br><span class="line"> # GitHub End</span><br></pre></td></tr></table></figure><h4 id="解决自己的文章别人看不了图片的方法"><a href="#解决自己的文章别人看不了图片的方法" class="headerlink" title="解决自己的文章别人看不了图片的方法"></a>解决自己的文章别人看不了图片的方法</h4><blockquote><p>我们都知道 <code>jsDelivrCND</code>吧？用处就不说了吧，我们将对应得github路径替换为jsDelivr的路径就好了，各种方法查看 <a href="https://www.jsdelivr.com/">jsDelivr官网</a>，关于github这一块有如下内容：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/30/130709-506829.png" alt="image-20210130130707671"></p><blockquote><p>从链接格式来看，我们就知道，不同的只是前面的部分，我们将github上对应的图片路径按照格式替换即可。</p><p>例如下图所示：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/30/130943-98624.png" alt="image-20210130130942881"></p><blockquote><p><code>注意</code>：如果你的分支不是master，请根据自己的项目分支进行替换，例如现在新建项目，主分支皆为 main ，不再是以前的master了，至于为什么更改，可以自行百度，作为一个优秀的中国人民，我们不讨论国际政治问题……</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>当然了，使用 <code>jsDelivrCND</code>也不是万能的，毕竟谁也不知道免费的cdn什么时候就用不了了，所以如果不想承担此类风险，可以采取其它办法，例如将 阿里云、腾讯云、七牛云等作为图床，也可以购买国内某些公司研发的cdn服务产品，国内也有公司提供免费的cdn服务，但是一如上面所说，也许有一天免费的就不能用了……</p></blockquote><hr><p>提前祝大家新年快乐！写完了这一篇水文，决定奖励自己一壶茶，起炉，烧水，只是可惜了没有湖，没有舟，更没有雪……</p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md文件的相关使用</title>
      <link href="2021/01/10/md%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/"/>
      <url>2021/01/10/md%E6%96%87%E4%BB%B6%E7%9A%84%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>天已雪，一杯否？</p><p>—— 南风落尽</p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因为天冷，已经很久没有更新博客了，想了想，还是决定写一篇水文，一是促使自己记得写文章，二是记录自己平时学到的杂七杂八的东西，免得忘了又到处找。于是就有了接下来的一篇水文。客官，天太冷，待我煮壶热茶，我们边喝边看可好？</p><h3 id="什么是md文件"><a href="#什么是md文件" class="headerlink" title="什么是md文件"></a>什么是md文件</h3><p>md全称markdown，markdown也是一种标记语言。该类型文件可使用普通编辑器打开或者编辑，例如：记事本，EditPlus，sublime等等，当然了，也有更专业的编辑器，例如我现在正在使用的——Typora。</p><h3 id="md文件的书写格式"><a href="#md文件的书写格式" class="headerlink" title="md文件的书写格式"></a>md文件的书写格式</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><ul><li>第一种—— <strong># 字法</strong> 。例如：</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/140604-252563.png" alt="image-20210110141545939"></p><blockquote><p>效果如下，请自动忽略那个 √(我也不知道咋个来的，可能是我用的主题的原因……)</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/140613-744230.png" alt="image-20210110142716751"></p><ul><li><p>第二种—— <strong>#字法</strong>。例如：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/144115-788067.png" alt="143348-395253"></p></li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li><p>有序列表</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/140837-127859.png" alt="image-20210110143652111"></p></li></ul><blockquote><p>效果如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/140722-327681.png" alt="image-20210110143737303"></p><ul><li><p>无序列表，共三种方式，第一种： *；第二种为： +；第三种为 -。书写方式如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/140732-184473.png" alt="image-20210110143845195"></p></li></ul><blockquote><p>效果如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/140846-21335.png" alt="image-20210110143958652"></p><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p>比如说，想对某个部分做的内容做一些说明或者引用等，可以使用这个 &gt; ，记得这个符号后面要跟一个空格。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142104-782236.png" alt="144509-553031"></p><blockquote><p>效果如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142248-448543.png" alt="144610-19462"></p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><blockquote><p>分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示。</p><p><strong>注意</strong>：至少要3个，且不需要连续，有空格也可以，我这里就不做这个例子了。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/141150-880694.png" alt="image-20210110144841123"></p><blockquote><p>效果如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142209-219828.png" alt="144940-402686"></p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142251-363257.png" alt="145354-4972"></p><blockquote><p>如上图所示，中括号内写链接说明，后面的小括号(<code>这里的小括号是英文的小括号</code>)内添加链接地址，这种方式叫<strong>行内式</strong>，其效果如下，</p><p>这只是其中一种，还有另外一种叫 <strong>参数式</strong>，我这里就不再赘述，我觉得有这一种就可以了，有兴趣的可以自行百度一下。<a href="http://www.baidu.com/">百度一下，你就知道</a>。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142311-785644.png" alt="145422-15500"></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><blockquote><p>图片的形式就不多说，参考上面的链接，格式都差不多，也分为参数式和行内式，行内式只需要在中括号前面加上 ！ 符号即可</p></blockquote><h4 id="代码框"><a href="#代码框" class="headerlink" title="代码框"></a>代码框</h4><blockquote><p>主要用于在展示代码，格式如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/141111-543218.png" alt="image-20210110150501894"></p><blockquote><p>效果如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142309-113489.png" alt="150534-799878"></p><h4 id="强调作用"><a href="#强调作用" class="headerlink" title="强调作用"></a>强调作用</h4><ul><li><p>加粗，格式为：</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142315-350369.png" alt="151531-142290"></p><blockquote><p> 效果如下：</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/nanfengluojin/image@main/blog/202101/23/142320-243748.png" alt="152539-958374"></p></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>暂时就写这没多，只是写了平时会用到的，还有包括 <strong>表格，下划线</strong> 等没有写出来，感觉用的不是很多(至少我到现在还没用过表格？都是直接写了就是了，最主要是typora编辑器可以用快捷键实现表格呀，想画多少就画多少)。</p><hr><p>无力吐槽啊……太冷了，窗外在下雪。周末也没了，明天还要上班，内心简直极度悲伤……我的茶也喝没了，客官，你要不要再煮一壶茶？</p>]]></content>
      
      
      <categories>
          
          <category> md文件编辑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式</title>
      <link href="2020/12/12/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/12/12/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>西风吹散思念，月霜鬓染</p><p>—— 南风落尽</p><hr><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>因为天气逐渐寒冷，于是决定接下来的整个冬季都写水文，当然了，这就会导致文章的字数肯定不会多，因为敲键盘的手真的很冷。你在北方的暖气里温暖如春，我在南方的冷风里瑟瑟发抖……</p></blockquote><h3 id="cron表达式"><a href="#cron表达式" class="headerlink" title="cron表达式"></a>cron表达式</h3><blockquote><p>cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式：</p><ul><li>Seconds Minutes Hours DayofMonth Month DayofWeek Year</li><li>Seconds Minutes Hours DayofMonth Month DayofWeek</li></ul></blockquote><blockquote><p>cron表达式从左至右分别代表 秒 分 小时 天 月 周 (年)，各字段的使用值参见以下两张表</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wzpkuye/image/raw/master/typora/202101/10/154231-719379.png" alt="image-20201212124311715"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/wzpkuye/image/raw/master/typora/202101/10/154242-570331.png" alt="image-20201212124436074"></p><h3 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h3><blockquote><p>cron表达式经常用于执行定时任务，而关于java中执行定时任务的几种方式请参考该篇文章 <a href="https://wzpkuye.gitee.io/2020/11/07/java%20%E4%BB%A5%E5%8F%8A%20springboot%20%E5%88%86%E5%88%AB%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/">java 以及 springboot 分别实现定时器</a>。</p></blockquote><h3 id="cron表达式常用例子"><a href="#cron表达式常用例子" class="headerlink" title="cron表达式常用例子"></a>cron表达式常用例子</h3><blockquote><p>常用的表达式例子：</p><ol><li>0 0 0 1 * ? * 表示在每月的1日的凌晨0点执行一次定时任务</li><li>0 0 0 * * ?  表示每天凌晨0点执行一次定时任务</li><li>0 0 8,12,16 * * ?  表示每天上午8点，中午12点，下午16点执行一次定时任务</li><li>0 0 10 ? * 1-7  表示周一到周日每天上午10点执行一次定时任务</li><li>*/5 * * * * ?   表示每五秒钟执行一次定时任务</li><li>0 */5 * * * ? 表示每隔5分钟执行一次定时任务</li><li>0 0 */5 * * ? 表示每隔5小时执行一次定时任务</li></ol></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>本文仅提供以上常用例子，其它请自行参照上表去写，我这里就不提供了，为什么呢？一个是我觉得其他的cron表达式也不常用，另外就是我不想写那么多，毕竟我懒……(狗头保命)。</p></blockquote><hr><p>不说了不说了，手开始抖了，键盘都敲不利索了(我能怎么办，我也很无奈啊)，赶紧煮壶茶，暖暖身体，毕竟南国的冬，真的是太冷了……</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cron表达式 </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>围炉听风,新醅试手烫</title>
      <link href="2020/12/05/%E5%9B%B4%E7%82%89%E5%90%AC%E9%A3%8E,%E6%96%B0%E9%86%85%E8%AF%95%E6%89%8B%E7%83%AB/"/>
      <url>2020/12/05/%E5%9B%B4%E7%82%89%E5%90%AC%E9%A3%8E,%E6%96%B0%E9%86%85%E8%AF%95%E6%89%8B%E7%83%AB/</url>
      
        <content type="html"><![CDATA[<p>寒冬已至，当温壶热酒，围炉听风，新醅试手烫</p><p>——— 南风落尽</p><hr><p>想了许久，还是决定写一个年终总结。去年想写来着，可杂乱无章的事情太多，到最后也就弃笔未写，今年打算补上，作为今年的年终总结，也作为工作以来的年终总结。</p><h3 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h3><p>时间过得很快，一七年毕业至今已有三年余，在这期间有过后悔，有过迷茫，也有过坚持。其实我也很奇怪我怎么就踏上了写代码的路，如果说在16年的十一月之前，有人跟我说我以后会成为一名程序员，那简直是天方夜谭，可就是这么造化弄人。稀里糊涂的入了行，稀里糊涂的写上了程序，稀里糊涂的学了一些IT相关的知识，也就稀里糊涂的走到了现在。</p><h3 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h3><p>还记得第一份工作是一七年八月份找到的，那个时候刚刚毕业一个来月，也不算真正的开发，只能算是驻场运维那种。那是人生中第一次离家，第一次坐飞机，第一次去大西北，在甘肃兰州待了差不多半年？(记不得了，只记得年底回来以后就辞职了)，为什么呢？一是水土不服，二是一个人确实待的难受，三是还是希望做一个真正的程序员，哈哈哈哈哈……(吐槽一下，兰州的面食是真的不好吃，溜……)。</p><p>在现在的公司待了也快两年半了，有一个大佬带着，教了很多东西，慢慢的我也学了很多的东西，从一个小白到现在也勉强算是一个经验丰富的大白了(唉，菜鸡始终是菜鸡呀，当然了，我有一个美好的愿望，那就是有一天我也能成为万人敬仰的大神)。这两年，有了自己的博客，有了自己的站点，想起来了就在上面写一下文章，总结一下知识点，或者记录一下工作中遇到的bug，当然，想不起来也就算了，一切随缘(阿弥陀佛)。</p><p>在工作期间，也看了许多的博客，最喜欢的当属二哥的文章，学了很多，二哥的文章干货满满又不失言语间的幽默(有兴趣的可以微信搜索公众号 沉默王二 ，添加关注)。当然了，技术社区肯定也是逛的，比如 csdn(虽然已经没落，但是你不得不承认，它在百度搜索上占的比例太大了)、博客园、掘金(感觉这是一个前端的技术社区，后端没啥人，平时也可以拿来摸鱼)、开源中国等……</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>这三年，改过许多目标的实现时间点，刚毕业的时候计划着毕业三年内买车，五年内在成都有一套自己的一百平。按照计划，应该是没问题的，可是计划赶不上变化，当我一心想买车的时候，父亲大人和母亲大人劝我先买房，在挣扎了许久之后放弃了买车，决定先买房。于是到现在，啥也没有，当然了，今年在看房，只是后来因为自己的原因没买成，在这里许下一个小小的心愿，争取明年把一百平买了。</p><p>这三年也认识了许多的人，只是到现在，有的已经很少联系，安慰着自己，朋友不必多，三五足矣。平时约着聚一下，聊聊各自最近的烦恼，吃着火锅吹吹牛，哈哈哈哈……愿友谊常在，也愿经年后，未断联系。</p><p>这期间有过一次恋爱，当然了，到最后以失败告终，异地恋嘛，虽然很伤心，但我也不想去问为什么，分了就分了吧。再后来熬不住的时候，找了一个时间，出去旅游散心去了，调整过来后，删了所有的联系方式，也删了所有与她相关的东西(也就山高路远，江湖不见，此生不再想逢，就此别过了)，生活也就回到了正常的轨迹中，保持好心态，一切随缘就好。</p><p>值得欣慰的是，父亲母亲的身体虽然偶有小毛病，可从未有过大毛病。只是今年外婆大病了一场，从鬼门关走了一遭，也就愈发的让我意识到他们都在老去，时间不等人啊，外公外婆伴我长大，我能做的只是陪他们老去。</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>许下一些美好的愿望，定下一些小目标，希望明年能够一一去实现它们：</p><ul><li>趁老人还在，多陪陪老人</li><li>希望父亲母亲身体健康</li><li>希望我家千金大人好好工作</li><li>升职加薪(挣更多的钱，哈哈哈哈……)</li><li>争取明年把一百平买了(毕竟有一个属于自己的一百平是很舒服的)</li><li>希望遇到一个合适的女孩子(虽然父亲和母亲很捉急，但这个真随缘了)</li><li>存一点点钱(具体存多少就不定了，多了我也存不起来……)</li></ul><hr><p>炉子里的火烧的正旺，倒了一杯热酒，一饮而尽，身体似乎暖了许多。转头看，窗外的风愈发的大了……</p>]]></content>
      
      
      <categories>
          
          <category> 南风落尽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 南风落尽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot实现动态定时任务</title>
      <link href="2020/12/05/springboot%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>2020/12/05/springboot%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>年底了，还是想提笔再写篇文章，虽然写的不好，文章也不曾进行深入的讲解，但是客官，懂得都懂啊，您说对吧？(挑眉)，来来来，天冷了，我们温壶热茶，让我将本文细细道来，客官你慢品慢听可好？</p></blockquote><blockquote><p>本文讲述的是定时任务的升级版本——<strong>动态定时任务</strong>，定时任务的相关可参考这篇文章 <a href="https://wzpkuye.gitee.io/2020/11/07/java%20%E4%BB%A5%E5%8F%8A%20springboot%20%E5%88%86%E5%88%AB%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/">java 以及 springboot 分别实现定时器</a></p></blockquote><blockquote><p>那么动态定时任务的优点在哪里呢？比如说，我们的项目需要新增一个定时任务或者需要删除一个定时任务，亦或者需要修改某一个定时任务的参数，那我们最常规的做法是什么？只能修改代码，然后替换服务器的代码，对吧？这样做费时费力还容易出错，这时，<strong>动态定时任务</strong>的优点就体现出来了</p><ol><li><strong>无需修改代码</strong></li><li><strong>无需停服替换代码</strong></li><li><strong>避免意外情况的发生</strong></li></ol><p>那么动态定时任务要怎么实现呢？客官且细细看来</p></blockquote><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ThreadPoolTaskScheduler线程池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskScheduler <span class="title">threadPoolTaskScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskScheduler executor = <span class="keyword">new</span> ThreadPoolTaskScheduler();</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="comment">//设置线程池容量</span></span><br><span class="line">        executor.setPoolSize(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//线程名前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;dynamicTask-&quot;</span>);</span><br><span class="line">        <span class="comment">//当调度器shutdown被调用时等待当前被调度的任务完成</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//线程关闭的等待时长</span></span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>ThreadPoolTaskScheduler，可以很方便的对重复执行的任务进行调度管理，相比于通过java自带的周期性任务线程池ScheduleThreadPoolExecutor，此bean对象支持根据cron表达式创建周期性任务</p><p>关于线程池的配置，上述代码中已有注释说明，这里就不再赘述</p></blockquote><h3 id="新建-DynamicTask-工具类"><a href="#新建-DynamicTask-工具类" class="headerlink" title="新建 DynamicTask 工具类"></a>新建 DynamicTask 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">mport org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.support.CronTrigger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.wzp.oauth2.util.DateUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp.wei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/11/30 11:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ThreadPoolTaskScheduler threadPoolTaskScheduler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, ScheduledFuture&lt;?&gt;&gt; taskMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cron</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(String name, String cron)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != taskMap.get(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ScheduledFuture&lt;?&gt; schedule = threadPoolTaskScheduler.schedule(getRunnable(name), <span class="keyword">new</span> CronTrigger(cron));</span><br><span class="line">        taskMap.put(name, schedule);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止任务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">stop</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == taskMap.get(name)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ScheduledFuture&lt;?&gt; scheduledFuture = taskMap.get(name);</span><br><span class="line">        scheduledFuture.cancel(<span class="keyword">true</span>);</span><br><span class="line">        taskMap.remove(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Runnable <span class="title">getRunnable</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(name + <span class="string">&quot;---动态定时任务运行---&quot;</span> + DateUtil.formatLocalDateTime());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这里，我只提供了两个方法，一个新增任务的方法，一个删除任务的方法。暂停任务和修改任务的方法也是存在的，当然了，这个可以有，只是我这里没有写出来，你们可以自己写一下</p></blockquote><h3 id="动态定时任务的使用"><a href="#动态定时任务的使用" class="headerlink" title="动态定时任务的使用"></a>动态定时任务的使用</h3><blockquote><p>我们新增一个 taskController，在controller中写下如下代码，当然，我这里仅仅是为了测试哈。所以就把参数写在了代码里，测试结果就不贴了，不出意外的话，不会出问题，如果出了问题，我也绝对不会承认是我的问题(哼哼)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;dynamicTask&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">dynamicTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String cron = <span class="string">&quot;*/5 * * * * ?&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> DynamicTask().add(<span class="string">&quot;A&quot;</span>, cron);</span><br><span class="line">        <span class="keyword">new</span> DynamicTask().add(<span class="string">&quot;B&quot;</span>, cron);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="将参数写入数据库"><a href="#将参数写入数据库" class="headerlink" title="将参数写入数据库"></a>将参数写入数据库</h3><blockquote><p>上面仅仅是解决了动态更改定时任务的问题，可那不是我们每次增加一个定时任务都要去发一次请求，并且将相关参数传递过去吗？一旦某个任务的参数出了问题，就又得调用一次删除的接口，然后再一次新增，可要是记不得是哪一个定时任务出了问题，万一停错了任务，这个锅背在身上那是肯定甩不掉了，不要捉急，对于这个我们也是有解决办法的……那就是将每个任务的参数写进数据库，这样我们每一次新增任务都把相关信息网数据库存一下，一旦某个任务的参数写错了，我们可以通过查看相关参数进行更正，从而达到更正定时任务的目的。</p><p>那就肯定有人说，假如我有十几个定时任务，在我项目重启后，我岂不是要请求十几次接口吗？这是不是太麻烦了？有没有更好的处理方式？(嗯……灵魂三连问)，对于这三个问题，我只能说，肯定有更好的处理方式呀，客官你不要捉急，热茶要细品，才能存齿留香，回味悠长……</p></blockquote><h3 id="初始化定时任务"><a href="#初始化定时任务" class="headerlink" title="初始化定时任务"></a>初始化定时任务</h3><blockquote><p>上面说到将定时任务的参数写到了数据库，那么我们只需要在项目重启后，查询一遍数据库，然后循环一下启动就好了呀，我们在刚刚的工具类中我们新增以下代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化任务 在服务器重启后自动启动任务</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initDynamic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       list.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">       list.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">       String cron = <span class="string">&quot;*/5 * * * * ?&quot;</span>;</span><br><span class="line">       list.forEach(s -&gt; &#123;</span><br><span class="line">           ScheduledFuture&lt;?&gt; schedule = threadPoolTaskScheduler.schedule(getRunnable(s), <span class="keyword">new</span> CronTrigger(cron));</span><br><span class="line">           taskMap.put(s, schedule);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我就不写查询数据库的办法了，直接将数据写在代码里，原理是一样的，然后我们添加一个 @PostConstruct 注解，表示这个东西我只需要在项目启动后执行一次(警告你你别瞎执行哈)，这样，我们每次在项目重启以后，这段代码都会自动跑一次，读取数据库，按部就班的执行定时任务</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>当然了，我这里只是提供一个简单的例子，更多的需要你们自己改一下哦，客官你看，这是不是就是你要的？哦，茶喝完了呀？这么冷的天，来来来，续上续上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0使用redis存储token报错</title>
      <link href="2020/11/28/OAuth2.0%E4%BD%BF%E7%94%A8redis%E5%AD%98%E5%82%A8token%E6%8A%A5%E9%94%99/"/>
      <url>2020/11/28/OAuth2.0%E4%BD%BF%E7%94%A8redis%E5%AD%98%E5%82%A8token%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在spring security oauth2.0中，授权服务使用redis存储token的时候，报错：java.lang.NoSuchMethodError: org.springframework.data.redis.connection.RedisConnection.set([B[B)V</p></blockquote><blockquote><p>我们翻译一下，就不难理解它的意思，这说明版本有问题，当然了，我们也给出了解决方案<br><strong>解决方案</strong>，指定oauh2.0的版本，将oauth2.0的版本升级到2.3.4及其以上，即在pom文件中，加入下面的依赖即可解决问题（我是升到2.3.8版本的，因为2.4.0版本下，有相关配置已过时）。</p></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security.oauth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>至此，问题就迎刃而解，虽然是个小问题，但是如果我们第一次碰到，依然会抓瞎的……</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>本文没得结语，嗯……主要是不晓得说啥子呀</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> OAuth2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 使用 ip2region 获取地理位置</title>
      <link href="2020/11/28/java%20%E4%BD%BF%E7%94%A8%20ip2region%20%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/"/>
      <url>2020/11/28/java%20%E4%BD%BF%E7%94%A8%20ip2region%20%E8%8E%B7%E5%8F%96%E5%9C%B0%E7%90%86%E4%BD%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>因为最近有个需求需要根据客户端登录的ip地址进行城市定位，获取到用户的登录城市，网上查了一下，也借鉴了一些博客，我自己也使用ip2region自己写了一个</p></blockquote><h3 id="获取到客户端的ip地址"><a href="#获取到客户端的ip地址" class="headerlink" title="获取到客户端的ip地址"></a>获取到客户端的ip地址</h3><blockquote><p>该步骤参考我以前的文章 <a href="https://wzpkuye.gitee.io/2020/11/28/%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AFip%E5%9C%B0%E5%9D%80/">获取客户端ip地址</a></p></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lionsoul<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ip2region<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="需要的文件下载地址"><a href="#需要的文件下载地址" class="headerlink" title="需要的文件下载地址"></a>需要的文件下载地址</h3><blockquote><p>db文件下载地址，<a href="https://gitee.com/lionsoul/ip2region/tree/master/data">https://gitee.com/lionsoul/ip2region/tree/master/data</a> 下载下来后解压，db文件在data目录下</p></blockquote><h3 id="新建-IpUtil-工具类"><a href="#新建-IpUtil-工具类" class="headerlink" title="新建 IpUtil 工具类"></a>新建 IpUtil 工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IpUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCityInfo</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        db文件下载地址，https://gitee.com/lionsoul/ip2region/tree/master/data 下载下来后解压，db文件在data目录下</span></span><br><span class="line">        String dbPath = <span class="string">&quot;G:\\IpData\\ip2region.db&quot;</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(dbPath);</span><br><span class="line">        <span class="keyword">if</span> (file.exists() == <span class="keyword">false</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Error: Invalid ip2region.db file&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查询算法 B-tree</span></span><br><span class="line">        <span class="keyword">int</span> algorithm = DbSearcher.BTREE_ALGORITHM;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DbConfig config = <span class="keyword">new</span> DbConfig();</span><br><span class="line">            DbSearcher searcher = <span class="keyword">new</span> DbSearcher(config, dbPath);</span><br><span class="line">            Method method = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (algorithm) &#123;</span><br><span class="line">                <span class="keyword">case</span> DbSearcher.BTREE_ALGORITHM:</span><br><span class="line">                    method = searcher.getClass().getMethod(<span class="string">&quot;btreeSearch&quot;</span>, String.class);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DbSearcher.BINARY_ALGORITHM:</span><br><span class="line">                    method = searcher.getClass().getMethod(<span class="string">&quot;binarySearch&quot;</span>, String.class);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DbSearcher.MEMORY_ALGORITYM:</span><br><span class="line">                    method = searcher.getClass().getMethod(<span class="string">&quot;memorySearch&quot;</span>, String.class);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Util.isIpAddress(ip) == <span class="keyword">false</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Error: Invalid ip address&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            DataBlock dataBlock = (DataBlock) method.invoke(searcher, ip);</span><br><span class="line">            <span class="keyword">return</span> dataBlock.getRegion();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String cityIpString = getCityInfo(<span class="string">&quot;218.88.22.78&quot;</span>);</span><br><span class="line">        String[] splitIpString = cityIpString.split(<span class="string">&quot;\\|&quot;</span>);</span><br><span class="line">        String province = splitIpString[<span class="number">2</span>].replaceAll(<span class="string">&quot;\\省&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        String city = splitIpString[<span class="number">3</span>].replaceAll(<span class="string">&quot;\\市&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        System.out.println(province);</span><br><span class="line">        System.out.println(city);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>正常情况下就能够正确获取到客户端登录用户的城市了，你也可以自己试一试哦，反正不要钱，哈哈哈哈哈……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ip2region </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx日志切割</title>
      <link href="2020/11/28/nginx%20%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2%EF%BC%88%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%EF%BC%89/"/>
      <url>2020/11/28/nginx%20%E6%97%A5%E5%BF%97%E5%88%87%E5%89%B2%EF%BC%88%E6%8C%89%E7%85%A7%E6%97%B6%E9%97%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在日常开发中，或许程序产生的日志不会那么大，但是在生产环境中，在日积月累下，日志只会越来越大，当有一天生产环境报错，需要排查错误的时候，这个庞大的日志数据仅仅是打开它就会让人懵逼了，于是我们需要将日志进行切割保存，便于我们后期的使用</p></blockquote><blockquote><p><strong>本文使用的方法仅仅针对Windows服务器，且方法不止这一种，还有其他的办法，我这里就不写出来了，至于Linux系统服务器上的nginx日志切割方法不在本文内容中</strong></p></blockquote><h3 id="创建nginxLog-bat文件"><a href="#创建nginxLog-bat文件" class="headerlink" title="创建nginxLog.bat文件"></a>创建nginxLog.bat文件</h3> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">   <span class="string">@echo</span> <span class="string">off</span></span><br><span class="line"><span class="string">rem</span> <span class="string">@echo</span> <span class="string">off</span> </span><br><span class="line"><span class="string">rem</span> <span class="string">取1天之前的日期</span></span><br><span class="line"><span class="string">echo</span> <span class="string">wscript.echo</span> <span class="string">dateadd(&quot;d&quot;,-1,date)</span> <span class="string">&gt;%tmp%\tmp.vbs</span> </span><br><span class="line"><span class="string">for</span> <span class="string">/f</span> <span class="string">&quot;tokens=1,2,3* delims=/&quot;</span> <span class="string">%%i</span> <span class="string">in</span> <span class="string">(&#x27;cscript</span> <span class="string">/nologo</span> <span class="string">%tmp%\tmp.vbs&#x27;)</span> <span class="string">do</span> <span class="string">set</span> <span class="string">y=%%i</span></span><br><span class="line"><span class="string">for</span> <span class="string">/f</span> <span class="string">&quot;tokens=1,2,3* delims=/&quot;</span> <span class="string">%%i</span> <span class="string">in</span> <span class="string">(&#x27;cscript</span> <span class="string">/nologo</span> <span class="string">%tmp%\tmp.vbs&#x27;)</span> <span class="string">do</span> <span class="string">set</span> <span class="string">m=%%j</span></span><br><span class="line"><span class="string">for</span> <span class="string">/f</span> <span class="string">&quot;tokens=1,2,3* delims=/&quot;</span> <span class="string">%%i</span> <span class="string">in</span> <span class="string">(&#x27;cscript</span> <span class="string">/nologo</span> <span class="string">%tmp%\tmp.vbs&#x27;)</span> <span class="string">do</span> <span class="string">set</span> <span class="string">d=%%k</span></span><br><span class="line"><span class="string">if</span> <span class="string">%m%</span> <span class="string">LSS</span> <span class="number">9</span> <span class="string">set</span> <span class="string">m=0%m%</span></span><br><span class="line"><span class="string">if</span> <span class="string">%d%</span> <span class="string">LSS</span> <span class="number">9</span> <span class="string">set</span> <span class="string">d=0%d%</span></span><br><span class="line"><span class="string">echo</span> <span class="string">%y%-%m%-%d%</span></span><br><span class="line"> </span><br><span class="line"><span class="string">rem</span> <span class="string">设置</span> <span class="string">Nginx</span> <span class="string">位于的盘符</span></span><br><span class="line"><span class="string">set</span> <span class="string">NGINX_DRIVER=C:</span></span><br><span class="line"><span class="string">rem</span> <span class="string">设置</span> <span class="string">Nginx</span> <span class="string">的主目录</span></span><br><span class="line"><span class="string">set</span> <span class="string">NGINX_PATH=%NGINX_DRIVER%\nginx-1.14.1</span></span><br><span class="line"><span class="string">rem</span> <span class="string">设置</span> <span class="string">Nginx</span> <span class="string">的日志目录</span></span><br><span class="line"><span class="string">set</span> <span class="string">LOG_PATH=%NGINX_PATH%\logs</span></span><br><span class="line"><span class="string">rem</span> <span class="string">移动文件</span></span><br><span class="line"><span class="string">move</span> <span class="string">%LOG_PATH%\access.log</span> <span class="string">%LOG_PATH%\access_%y%-%m%-%d%.log</span></span><br><span class="line"><span class="string">move</span> <span class="string">%LOG_PATH%\error.log</span> <span class="string">%LOG_PATH%\error_%y%-%m%-%d%.log</span></span><br><span class="line"><span class="string">rem</span> <span class="string">切换到</span> <span class="string">Nginx</span> <span class="string">所在的盘符</span></span><br><span class="line"><span class="string">%NGINX_DRIVER%</span></span><br><span class="line"><span class="string">rem</span> <span class="string">进入</span> <span class="string">Nginx</span> <span class="string">的主目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">%NGINX_PATH%</span></span><br><span class="line"><span class="string">rem</span> <span class="string">向</span> <span class="string">nginx</span> <span class="string">发送</span> <span class="string">reopen</span> <span class="string">信号以重新打开日志文件，功能与</span> <span class="string">Linux</span> <span class="string">平台中的</span> <span class="string">kill</span> <span class="string">-USR1</span> <span class="string">一致</span></span><br><span class="line"><span class="string">nginx</span> <span class="string">-s</span> <span class="string">reopen</span></span><br><span class="line"><span class="string">echo</span> <span class="string">on</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>将该文件放在服务器相应的位置，然后在Windows服务器上将其添加到计划任务里面，设置为每天执行一次就可以了（<strong>仅仅针对Windows服务器</strong>）</p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>习惯了写一个结尾，不过本文也没啥结尾的，nginx的日至切割方法还有其他的，比如直接在config文件上添加脚本……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 获取客户端ip地址</title>
      <link href="2020/11/28/%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AFip%E5%9C%B0%E5%9D%80/"/>
      <url>2020/11/28/%E8%8E%B7%E5%8F%96%E5%AE%A2%E6%88%B7%E7%AB%AFip%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>一般的系统，在正常情况下，都会去获取客户端登录用户的ip地址，当然了，肯定不是拿来做坏事，基本上会用在 异地登录检测，用于城市获取等相关上面，毕竟，违法犯罪的事情我们不做，下面提供一波获取ip地址的工具类</p></blockquote><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取客户端ip地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getIP</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String ip = request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ip != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ip = ip.split(<span class="string">&quot;\\,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checkIP(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checkIP(ip)) &#123;</span><br><span class="line">            ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!checkIP(ip)) &#123;</span><br><span class="line">            ip = request.getRemoteAddr();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ip;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkIP</span><span class="params">(String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unkown&quot;</span>.equalsIgnoreCase(ip)</span><br><span class="line">                || ip.split(<span class="string">&quot;\\.&quot;</span>).length != <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取客户端ip地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRealIp</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String ip = request.getHeader(<span class="string">&quot;x-forwarded-for&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;x-forwarded-for ip: &quot;</span> + ip);</span><br><span class="line">    <span class="keyword">if</span> (ip != <span class="keyword">null</span> &amp;&amp; ip.length() != <span class="number">0</span> &amp;&amp; !<span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        <span class="comment">// 多次反向代理后会有多个ip值，第一个ip才是真实ip</span></span><br><span class="line">        <span class="keyword">if</span>( ip.indexOf(<span class="string">&quot;,&quot;</span>)!=-<span class="number">1</span> )&#123;</span><br><span class="line">            ip = ip.split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;Proxy-Client-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;WL-Proxy-Client-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;HTTP_CLIENT_IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;HTTP_X_FORWARDED_FOR&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getHeader(<span class="string">&quot;X-Real-IP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ip == <span class="keyword">null</span> || ip.length() == <span class="number">0</span> || <span class="string">&quot;unknown&quot;</span>.equalsIgnoreCase(ip)) &#123;</span><br><span class="line">        ip = request.getRemoteAddr();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>其实，从根本上来说，第一种和第二种没有任何区别，都是一样的，只是写法不一样，至于用哪一种，则主要是看个人喜好……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 获取ip地址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5 相关使用</title>
      <link href="2020/11/28/MD5%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/"/>
      <url>2020/11/28/MD5%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>MD5信息摘要算法（英语：MD5 Message-Digest Algorithm），一种被广泛使用的密码散列函数，可以产生出一个128位（16字节）的散列值（hash value），用于确保信息传输完整一致。MD5由美国密码学家罗纳德·李维斯特（Ronald Linn Rivest）设计，于1992年公开，用以取代MD4算法。这套算法的程序在 RFC 1321 标准中被加以规范。1996年后该算法被证实存在弱点，可以被加以破解，对于需要高度安全性的数据，专家一般建议改用其他算法，如SHA-2。2004年，证实MD5算法无法防止碰撞（collision），因此不适用于安全性认证，如SSL公开密钥认证或是数字签名等用途。</p></blockquote><blockquote><p>但是在我们的日常开发中，依然会使用它进行密码的加密处理，或者取文件的MD5值，下面就介绍这两种情况的使用</p></blockquote><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MD5加密</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 要加密的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> salt 密码的&quot;盐&quot;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String password, String salt)</span> </span>&#123;</span><br><span class="line">        password = password + salt;</span><br><span class="line">        MessageDigest md5 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = password.toCharArray();</span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = <span class="keyword">new</span> <span class="keyword">byte</span>[charArray.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; charArray.length; i++)</span><br><span class="line">            byteArray[i] = (<span class="keyword">byte</span>) charArray[i];</span><br><span class="line">        <span class="keyword">byte</span>[] md5Bytes = md5.digest(byteArray);</span><br><span class="line">        StringBuffer hexValue = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; md5Bytes.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> val = ((<span class="keyword">int</span>) md5Bytes[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; <span class="number">16</span>) &#123;</span><br><span class="line">                hexValue.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hexValue.append(Integer.toHexString(val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hexValue.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件取md5"><a href="#文件取md5" class="headerlink" title="文件取md5"></a>文件取md5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 文件类取MD5</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fileMD5</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> (InputStream stream = Files.newInputStream(file.toPath(), StandardOpenOption.READ)) &#123;</span><br><span class="line">           <span class="keyword">return</span> streamMD5(stream);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 输入流取MD5</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> stream</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">streamMD5</span><span class="params">(InputStream stream)</span> </span>&#123;</span><br><span class="line">       MessageDigest md5 = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] byteArray = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           md5 = MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">           byteArray = toByteArray(stream);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">byte</span>[] md5Bytes = md5.digest(byteArray);</span><br><span class="line">       StringBuffer hexValue = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; md5Bytes.length; i++) &#123;</span><br><span class="line">           <span class="keyword">int</span> val = ((<span class="keyword">int</span>) md5Bytes[i]) &amp; <span class="number">0xff</span>;</span><br><span class="line">           <span class="keyword">if</span> (val &lt; <span class="number">16</span>) &#123;</span><br><span class="line">               hexValue.append(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           hexValue.append(Integer.toHexString(val));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> hexValue.toString();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] toByteArray(InputStream input) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       ByteArrayOutputStream output = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">       <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">4</span>];</span><br><span class="line">       <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">while</span> (-<span class="number">1</span> != (n = input.read(buffer))) &#123;</span><br><span class="line">           output.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> output.toByteArray();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>当然了，肯定还有更多的使用方法，不过本文暂时就介绍到这里，后面再进行更新……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MD5加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 微信小程序加密数据的解密</title>
      <link href="2020/11/21/java%20%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%AF%86/"/>
      <url>2020/11/21/java%20%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A7%A3%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在上一篇文章中，我们通过一系列操作生成了我们想要的数据，证明了数据的准确性，那么我们在获取到小程序的加密数据后，首先做的是校验数据，校验通过后进行数据的解密，也就是今天这篇文章</p></blockquote><h3 id="新建小程序用户隐私数据解密工具类"><a href="#新建小程序用户隐私数据解密工具类" class="headerlink" title="新建小程序用户隐私数据解密工具类"></a>新建小程序用户隐私数据解密工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp.wei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/7/7 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WXBizDataUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String illegalAesKey = <span class="string">&quot;50001&quot;</span>;<span class="comment">//非法密钥</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String illegalIv = <span class="string">&quot;50002&quot;</span>;<span class="comment">//非法初始向量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String illegalBuffer = <span class="string">&quot;50003&quot;</span>;<span class="comment">//非法密文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String decodeBase64Error = <span class="string">&quot;50004&quot;</span>; <span class="comment">//解码错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String noData = <span class="string">&quot;50005&quot;</span>; <span class="comment">//数据不正确</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String sessionKey;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WXBizDataCrypt</span><span class="params">(String appid, String sessionKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appid = appid;</span><br><span class="line">        <span class="keyword">this</span>.sessionKey = sessionKey;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检验数据的真实性，并且获取解密后的明文.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> encryptedData string 加密的用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iv            string 与用户数据一同返回的初始向量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String 返回用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decryptData</span><span class="params">(String encryptedData, String iv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.length(sessionKey) != <span class="number">24</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> illegalAesKey;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对称解密秘钥 aeskey = Base64_Decode(session_key), aeskey 是16字节。</span></span><br><span class="line">        <span class="keyword">byte</span>[] aesKey = Base64.decodeBase64(sessionKey);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (StringUtils.length(iv) != <span class="number">24</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> illegalIv;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对称解密算法初始向量 为Base64_Decode(iv)，其中iv由数据接口返回。</span></span><br><span class="line">        <span class="keyword">byte</span>[] aesIV = Base64.decodeBase64(iv);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 对称解密的目标密文为 Base64_Decode(encryptedData)</span></span><br><span class="line">        <span class="keyword">byte</span>[] aesCipher = Base64.decodeBase64(encryptedData);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] resultByte = AESUtil.decrypt(aesCipher, aesKey, aesIV);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != resultByte &amp;&amp; resultByte.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String userInfo = <span class="keyword">new</span> String(resultByte, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                JSONObject jsons = JSON.parseObject(userInfo);</span><br><span class="line">                String id = jsons.getJSONObject(<span class="string">&quot;watermark&quot;</span>).getString(<span class="string">&quot;appid&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.equals(id, appid)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> illegalBuffer;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> userInfo;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> noData;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在controller相关方法里调用"><a href="#在controller相关方法里调用" class="headerlink" title="在controller相关方法里调用"></a>在controller相关方法里调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> JSONObject <span class="title">getUserInfo</span><span class="params">(String iv, String encryptedData, String sessionKey)</span> </span>&#123;</span><br><span class="line">        String userInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//解密数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WXBizDataCrypt biz = <span class="keyword">new</span> WXBizDataCrypt(CommonConfig.appletAppID, sessionKey);</span><br><span class="line">            userInfo = biz.decryptData(encryptedData, iv);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSONObject.parseObject(userInfo);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取到的数据就是 我们需要的数据，次数据包含了用户的隐私数据，不建议乱传，毕竟泄露用户隐私数据是 <strong>违法行为</strong>  </p></blockquote><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>至此，微信获取用户数据的流程基本上完成，剩下的就跟微信没啥关系了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序 java 通过 rawData 和 session_key 生成 signature 签名</title>
      <link href="2020/11/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20java%20%E9%80%9A%E8%BF%87%20rawData%20%E5%92%8C%20session_key%20%E7%94%9F%E6%88%90%20signature%20%E7%AD%BE%E5%90%8D/"/>
      <url>2020/11/20/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20java%20%E9%80%9A%E8%BF%87%20rawData%20%E5%92%8C%20session_key%20%E7%94%9F%E6%88%90%20signature%20%E7%AD%BE%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>做微信小程序时，我们需要用户授权登录获取用户的相关数据，如果涉及到隐私数据，需要服务端通过rawData 和 session_key 生成 signature 签名，从而校验数据的准确性</p></blockquote><h3 id="rawData"><a href="#rawData" class="headerlink" title="rawData"></a>rawData</h3><blockquote><p>rawData 由前端传到后端，包含用户的信息等数据</p></blockquote><h3 id="session-key"><a href="#session-key" class="headerlink" title="session_key"></a>session_key</h3><blockquote><p>session_key 是服务器在通过code向微信请求回来的数据，会话密钥 session_key 是对用户数据进行 加密签名 的密钥。为了应用自身的数据安全，开发者服务器不应该把会话密钥下发到小程序，也不应该对外提供这个密钥</p></blockquote><h3 id="signature-签名"><a href="#signature-签名" class="headerlink" title="signature 签名"></a>signature 签名</h3><blockquote><p>signature 签名一个是微信返回前端，一个是后端通过 rawData 和 session_key 生成，通过比对两个signature 签名是否一致从而判定请求是否正确</p><ol><li>通过调用接口（如 wx.getUserInfo）获取数据时，接口会同时返回 rawData、signature，其中 signature = sha1( rawData + session_key )</li><li>开发者将 signature、rawData 发送到开发者服务器进行校验。服务器利用用户对应的 session_key 使用相同的算法计算出签名 signature2 ，比对 signature 与 signature2 即可校验数据的完整性。</li></ol></blockquote><h3 id="后端生成-signature-算法如下"><a href="#后端生成-signature-算法如下" class="headerlink" title="后端生成 signature 算法如下"></a>后端生成 signature 算法如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getsignature2</span><span class="params">(String rawData, String sessionKey)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        String stringASCII = rawData + sessionKey;</span><br><span class="line">        String signature2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//指定sha1算法</span></span><br><span class="line">            MessageDigest digest = MessageDigest.getInstance(<span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line">            digest.update(stringASCII.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">//获取字节数组</span></span><br><span class="line">            <span class="keyword">byte</span> messageDigest[] = digest.digest();</span><br><span class="line">            <span class="comment">// 创建 Hex 字符串</span></span><br><span class="line">            StringBuffer hexString = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            <span class="comment">// 字节数组转换为 十六进制 数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; messageDigest.length; i++) &#123;</span><br><span class="line">                String shaHex = Integer.toHexString(messageDigest[i] &amp; <span class="number">0xFF</span>);</span><br><span class="line">                <span class="keyword">if</span> (shaHex.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                    hexString.append(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                hexString.append(shaHex);</span><br><span class="line">                signature2 = hexString.toString().toLowerCase();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException | UnsupportedEncodingException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> signature2;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h3><blockquote><p>上述代码就实现了这个过程，其中有个坑，digest.update(stringASCII.getBytes(“UTF-8”)); 该行代码我们指定了编码格式，这在idea上面运行是没有问题的，因为idea的编码格式我们平时也是指定的utf-8，但是当项目部署到tomcat上后，会出现获取到的 signature 和前端传过来的 signature 不一致，导致数据检验不通过，原因就是tomcat默认的编码格式是GBK，我们需要手动更改tomcat的编码格式</p></blockquote><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote><p>打开tomcat里conf 下 的server.xml文件，在 下面图中的位置添加 URIEncoding=”UTF-8” 编码格式即可，如下图</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201121153229238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>至此，微信小程序生成签名完成</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识 Nacos</title>
      <link href="2020/11/14/%E5%88%9D%E8%AF%86%20Nacos/"/>
      <url>2020/11/14/%E5%88%9D%E8%AF%86%20Nacos/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您实现动态服务发现、服务配置管理、服务及流量管理。<br>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构(例如微服务范式、云原生范式)的服务基础设施<br>官方网址：<a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p></blockquote><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h4><blockquote><p>首先需要先下载 Nacos 并启动 Nacos server，下载地址：<a href="https://github.com/alibaba/nacos/releases">Nacos下载</a><br>Nacos 依赖 <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">Java 环境</a>来运行。如果您是从代码开始构建并运行Nacos，还需要为此配置 <a href="https://maven.apache.org/index.html">Maven环境</a>，请确保是在以下版本环境中安装使用</p><ol><li>64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。</li><li>64 bit JDK1.8+；<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a>。</li><li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a> &amp; <a href="https://maven.apache.org/settings.html">配置</a>。</li></ol></blockquote><h4 id="启动方式"><a href="#启动方式" class="headerlink" title="启动方式"></a>启动方式</h4><blockquote><p><strong>Linux/Unix/Mac启动命令(standalone代表着单机模式运行，非集群模式):</strong><br>sh startup.sh -m standalone<br>如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行：<br>bash startup.sh -m standalone</p><p><strong>Windows启动命令：</strong><br>cmd startup.cmd<br>或者双击startup.cmd运行文件。<br>附：端口默认8848，我们可以在conf文件夹下的application.properties文件上更改</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/202011141230183.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>最后输入 localhost:8848/nacos 打开控制台，我们就可以看到这样一个界面</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201114123035362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="创建生产者和消费者"><a href="#创建生产者和消费者" class="headerlink" title="创建生产者和消费者"></a>创建生产者和消费者</h3><blockquote><p>我们先创建一个消费者项目，项目名为nacos-consumer</p></blockquote><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8851</span> <span class="comment">#消费者者的端口</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">10.0</span><span class="number">.30</span><span class="number">.60</span><span class="string">:8848</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="主方法加注解"><a href="#主方法加注解" class="headerlink" title="主方法加注解"></a>主方法加注解</h4><blockquote><p>我们在主方法上加上这两个注解  @EnableDiscoveryClient  @EnableFeignClients</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zp.wei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建一个controller"><a href="#创建一个controller" class="headerlink" title="创建一个controller"></a>创建一个controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzp.nacos;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    TestService testService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String result = testService.hello(<span class="string">&quot;wzp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建service"><a href="#创建service" class="headerlink" title="创建service"></a>创建service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzp.nacos;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp.wei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/3/30 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(name = &quot;nacos-producer&quot;, fallback = TestFallback.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建fallback"><a href="#创建fallback" class="headerlink" title="创建fallback"></a>创建fallback</h4><blockquote><p>fallback是为了在生产者无法提供服务的时候进行返回响应</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzp.nacos;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zp.wei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFallback</span> <span class="keyword">implements</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>至此，最简单的一个消费者基本上就好了，如果不是高需求，不需要进行额外的配置</p></blockquote><h3 id="创建生产者"><a href="#创建生产者" class="headerlink" title="创建生产者"></a>创建生产者</h3><blockquote><p>把上面的消费者项目复制一份，易容变成生产者，改名为 nacos-producer1</p></blockquote><h4 id="依赖不变"><a href="#依赖不变" class="headerlink" title="依赖不变"></a>依赖不变</h4><blockquote><p>依旧是上面消费者的两个依赖</p></blockquote><h4 id="配置文件如下"><a href="#配置文件如下" class="headerlink" title="配置文件如下"></a>配置文件如下</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8849</span> <span class="comment">#提供者的端口</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-producer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">10.0</span><span class="number">.30</span><span class="number">.60</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><h4 id="主方法的注解变化"><a href="#主方法的注解变化" class="headerlink" title="主方法的注解变化"></a>主方法的注解变化</h4><blockquote><p>主方法上面留下该注解 @EnableDiscoveryClient，这个 @EnableFeignClients 注解不要了</p></blockquote><h4 id="创建一个controller-1"><a href="#创建一个controller-1" class="headerlink" title="创建一个controller"></a>创建一个controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建服务</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zp.wei</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosProducerController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name: &quot;</span> + name + <span class="string">&quot;port: &quot;</span> + port);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello: &quot;</span> + name + <span class="string">&quot; port:&quot;</span> + port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建另一份生产者"><a href="#创建另一份生产者" class="headerlink" title="创建另一份生产者"></a>创建另一份生产者</h4><blockquote><p>把生产者复制一份生成一个同胞的弟弟，顺便改个名字叫 nacos-producer2，然后别忘了改配置文件下的端口号</p></blockquote><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><blockquote><p>最后我们启动三个项目来看一下效果……</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201114124237469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>如图，我们可以发现已经被注册到注册与发现中心了，接下来我们测试一波，请求一下<a href="http://localhost:8851/hello">http://localhost:8851/hello</a> 这个消费者的接口，结果如下</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201114124325387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201114124334259.png#pic_center" alt="在这里插入图片描述"></p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>至此，最基本最简单的配置完成，接下来就可以深入的进行其他骚操作了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 获取相应的时间</title>
      <link href="2020/11/14/java%20%E8%8E%B7%E5%8F%96%E7%9B%B8%E5%BA%94%E7%9A%84%E6%97%B6%E9%97%B4/"/>
      <url>2020/11/14/java%20%E8%8E%B7%E5%8F%96%E7%9B%B8%E5%BA%94%E7%9A%84%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>在java开发中，不可避免的需要使用到时间（不论是时间戳还是日期等），在java8出来以后，相关的时间类就替代了曾经的，我们对应得的使用方法当然也随之改变。下面就给出例子介绍使用java8的 LocalDate 等相关方法获取时间并作出对应得处理。</p></blockquote><h3 id="相关工具类"><a href="#相关工具类" class="headerlink" title="相关工具类"></a>相关工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用LocalDateTime获取现在的时间</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        System.out.println(localDateTime);</span><br><span class="line">        <span class="comment">// 转换为我们熟悉的时间格式</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(localDateTime.format(formatter));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用LocalDate获取现在的时间 只能获取到年月日</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        System.out.println(localDate);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用LocalTime获取现在的时间 只能获取到时分秒毫秒</span></span><br><span class="line">        LocalTime localTime = LocalTime.now();</span><br><span class="line">        System.out.println(localTime);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dayZero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取今日零点时间戳</span></span><br><span class="line">        Long nowTime = System.currentTimeMillis();</span><br><span class="line">        Long dayZero = nowTime - ((nowTime + TimeZone.getDefault().getRawOffset()) % (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span>));</span><br><span class="line">        System.out.println(dayZero);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startDayTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取本月第一天的零点时间戳</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        LocalDate localDate1 = localDate.withDayOfMonth(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span> startDayTime = localDate1.atStartOfDay(ZoneOffset.ofHours(<span class="number">8</span>)).toInstant().toEpochMilli();</span><br><span class="line">        System.out.println(startDayTime);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lastDayTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取本月最后一天最后一秒的时间戳</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        LocalDate lastDay = localDate.with(TemporalAdjusters.lastDayOfMonth());</span><br><span class="line">        <span class="keyword">long</span> lastDayTime = lastDay.atStartOfDay(ZoneOffset.ofHours(<span class="number">8</span>)).toInstant().toEpochMilli() + (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span> - <span class="number">1</span>);</span><br><span class="line">        System.out.println(lastDayTime);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取今日属于星期几</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDayOfWeek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(localDate.getDayOfWeek().getValue());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取对应日期属于星期几</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDayOfWeek</span><span class="params">(Long timeZero)</span> </span>&#123;</span><br><span class="line">        LocalDate localDate = Instant.ofEpochMilli(timeZero).atZone(ZoneOffset.ofHours(<span class="number">8</span>)).toLocalDate();</span><br><span class="line">        <span class="keyword">return</span> String.valueOf(localDate.getDayOfWeek().getValue());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        localDateTime();</span><br><span class="line">        localDate();</span><br><span class="line">        localTime();</span><br><span class="line">        dayZero();</span><br><span class="line">        startDayTime();</span><br><span class="line">        lastDayTime();</span><br><span class="line">        getDayOfWeek();</span><br><span class="line">        getDayOfWeek(<span class="number">1598352076000L</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><blockquote><p>当然，还有其他的相关还没写完，留在后续补充吧，感觉这些已经暂时够用了……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于gradle5.0及其以上中 lombok 的使用</title>
      <link href="2020/11/07/%E5%85%B3%E4%BA%8Egradle5.0%E5%8F%8A%E5%85%B6%E4%BB%A5%E4%B8%8A%E4%B8%AD%20lombok%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/11/07/%E5%85%B3%E4%BA%8Egradle5.0%E5%8F%8A%E5%85%B6%E4%BB%A5%E4%B8%8A%E4%B8%AD%20lombok%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>Lombok 是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法.</p></blockquote><h3 id="二、gradle5-0以上使用lombok出现的坑"><a href="#二、gradle5-0以上使用lombok出现的坑" class="headerlink" title="二、gradle5.0以上使用lombok出现的坑"></a>二、gradle5.0以上使用lombok出现的坑</h3><blockquote><p>今天在我自己项目中使用lombok插件出现一件怪事，我用maven管理的时候，lombok没有任何问题，但是，当我使用gradle的时候，并将其改为5.0版本的时候，好嘛，问题出来了，lombok的相应注解不起作用了……接下来就解决这个问题</p></blockquote><h3 id="三、idea安装lombok插件"><a href="#三、idea安装lombok插件" class="headerlink" title="三、idea安装lombok插件"></a>三、idea安装lombok插件</h3><blockquote><p>第一步 ，安装lombok插件</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201107131001252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>第二步，设置这里，把√勾上</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201107131043630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="四、引入依赖"><a href="#四、引入依赖" class="headerlink" title="四、引入依赖"></a>四、引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.projectlombok:lombok:1.18.10&#x27;</span><br></pre></td></tr></table></figure><h3 id="五、问题的原因"><a href="#五、问题的原因" class="headerlink" title="五、问题的原因"></a>五、问题的原因</h3><blockquote><p>在以前的版本中，我们只需要引入只引入上面的依赖就可以了，但是这种做法在Gradle 5.0以后被明令禁止了，在4.x的高级版本中编译时也会有对应的告警，所以如果只引入一个则不会有任何作用……导致编译失败，提示找不到对应得get set 等……</p></blockquote><h3 id="六、解决办法"><a href="#六、解决办法" class="headerlink" title="六、解决办法"></a>六、解决办法</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.projectlombok:lombok:1.18.10&#x27;</span><br><span class="line">annotationProcessor &#x27;org.projectlombok:lombok:1.18.10&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>如上，引入两个依赖则不会出现文章中提到的的问题</p></blockquote><h3 id="七、结语"><a href="#七、结语" class="headerlink" title="七、结语"></a>七、结语</h3><blockquote><p>建议在5.0以下的版本在项目中也加上上面的两个依赖，避免以后再版本升级时产生这样的问题，当然了，maven项目不知道会不会出现这样的问题，毕竟我没试过……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> lombok </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 以及 springboot 分别实现定时任务</title>
      <link href="2020/11/07/java%20%E4%BB%A5%E5%8F%8A%20springboot%20%E5%88%86%E5%88%AB%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>2020/11/07/java%20%E4%BB%A5%E5%8F%8A%20springboot%20%E5%88%86%E5%88%AB%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>定时器，项目中遇到的应该不多，就比如我本人，到至今，在项目中使用到定时器也就三两次，在springboot还未出来之前，使用定时器估计是很难受的，虽然我没怎么用过，因为我刚开始工作的时候springboot出来了，然后真香，哈哈哈哈哈……</p></blockquote><h3 id="二、java上古时代的定时器实现"><a href="#二、java上古时代的定时器实现" class="headerlink" title="二、java上古时代的定时器实现"></a>二、java上古时代的定时器实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        runnable();</span><br><span class="line">        timerTask();</span><br><span class="line">        thread();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Runnable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//要执行的方法</span></span><br><span class="line">                System.out.println(<span class="string">&quot;HelloWorld！！！&quot;</span> + LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// ScheduledExecutorService:是从Java SE5的java.util.concurrent里，做为并发工具类被引进的，这是最理想的定时任务实现方式。</span></span><br><span class="line">        ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        <span class="comment">// 第一个参数为第一次执行的时间，第二个参数为首次执行的延时时间，第三个参数为定时执行的间隔时间</span></span><br><span class="line">        service.scheduleAtFixedRate(runnable, <span class="number">1</span>, <span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Timer是一个定时器工具，用来执行指定任务</span></span><br><span class="line"><span class="comment">     * TimerTask是一个抽象类，他的子类可以代表一个被Timer计划的任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timerTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TimerTask task = <span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//要执行的方法</span></span><br><span class="line">                System.out.println(<span class="string">&quot;HelloWorld！！！&quot;</span> + LocalDateTime.now());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">        <span class="comment">// 定义开始等待时间  --- 等待 5 秒</span></span><br><span class="line">        <span class="keyword">long</span> wait = <span class="number">5000</span>;</span><br><span class="line">        <span class="comment">// 定义每次执行的间隔时间</span></span><br><span class="line">        <span class="keyword">long</span> wait1 = <span class="number">1</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">// 安排任务在一段时间内运行</span></span><br><span class="line">        timer.scheduleAtFixedRate(task, wait, wait1);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * thread</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 每一秒钟执行一次</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> timeInterval = <span class="number">1000</span>;</span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="comment">//要执行的方法</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;HelloWorld！！！&quot;</span> + LocalDateTime.now());</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//同步延迟数据，并且会阻塞线程</span></span><br><span class="line">                        Thread.sleep(timeInterval);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//创建定时器</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        <span class="comment">//开始执行</span></span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、现代的springboot下实现"><a href="#三、现代的springboot下实现" class="headerlink" title="三、现代的springboot下实现"></a>三、现代的springboot下实现</h3><blockquote><p>第一种<br>1、在启动类上添加注解@EnableScheduling开启定时器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、给要定时执行的方法上添加注解@Scheduled(cron = “0 0 0 * * * “)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask1</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/2 * * * * *&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTimer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld！！！&quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>  第二种<br>  直接在定时器类上添加@Configuration、@EnableScheduling注解，标注这个类是配置文件，并开启定时开关；然后给要定时执行方法上添加@Scheduled(cron = “0 0 0 * * * “)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.EnableScheduling;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Configuration</span>      <span class="comment">//1.主要用于标记配置类，兼备Component的效果。</span></span><br><span class="line"><span class="meta">@EnableScheduling</span>   <span class="comment">// 2.开启定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleTask</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//3.添加定时任务</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/5 * * * * ?&quot;)</span></span><br><span class="line">    <span class="comment">//或直接指定时间间隔，例如：5秒 @Scheduled(fixedRate=5000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tasks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld！！！&quot;</span> + LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、附上cron表达式"><a href="#四、附上cron表达式" class="headerlink" title="四、附上cron表达式"></a>四、附上cron表达式</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201107120921954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020110712093660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><blockquote><p>暂时写到这里，有兴趣的可以自己测一下或者实现一下……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 定时任务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 随机取出一个元素</title>
      <link href="2020/11/06/java%20%E9%9A%8F%E6%9C%BA%E5%8F%96%E5%87%BA%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/"/>
      <url>2020/11/06/java%20%E9%9A%8F%E6%9C%BA%E5%8F%96%E5%87%BA%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>list在日常项目中是使用的非常普遍的，充斥在java项目中的各个角落，所有的java项目都会使用到list集合，这是毋庸置疑的，这里只是浅谈一下list的用途之一——从list中获取随机元素</p></blockquote><h3 id="二、list-简介"><a href="#二、list-简介" class="headerlink" title="二、list 简介"></a>二、list 简介</h3><blockquote><ol><li>list是一个有序的集合（也是被称为序列），和set不一样，list中允许重复元素的存在</li><li>list的使用者对元素的插入位置（索引）有着准确的控制，通过索引可以获取元素</li><li>list提供了各种方法来方便我们对其中的元素操作</li><li>list是java集合框架的一员</li></ol></blockquote><h3 id="三、使用list或者Random随机取出一个元素"><a href="#三、使用list或者Random随机取出一个元素" class="headerlink" title="三、使用list或者Random随机取出一个元素"></a>三、使用list或者Random随机取出一个元素</h3><blockquote><p>直接上代码，这里只是介绍取随机元素的三个用法（运用 list 和 random）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        aa();</span><br><span class="line">        bb();</span><br><span class="line">        cc();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">aa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;干饭&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;稀粥&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;炒菜&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;面条&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;火锅&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;冒菜&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;麻辣烫&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;烧烤&quot;</span>);</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> n = random.nextInt(list.size());</span><br><span class="line">        String aa = list.get(n);</span><br><span class="line">        System.out.println(aa);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line">        list1.add(<span class="number">4</span>);</span><br><span class="line">        list1.add(<span class="number">5</span>);</span><br><span class="line">        list1.add(<span class="number">6</span>);</span><br><span class="line">        list1.add(<span class="number">7</span>);</span><br><span class="line">        list1.add(<span class="number">8</span>);</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> n = random.nextInt(list1.size());</span><br><span class="line">        Integer bb = list1.get(n);</span><br><span class="line">        System.out.println(bb);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生0-99/1-100的随机数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> ran1 = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">int</span> ran2 = random.nextInt(<span class="number">100</span>)+<span class="number">1</span>;</span><br><span class="line">        System.out.println(ran1);</span><br><span class="line">        System.out.println(ran2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>看如上代码，三种方法本质上来说都是使用的Random，为啥要加上list呢，是因为我们平时生活中遇到的抽奖或者相似的功能中，基本上都是使用list将可控的值添加进去，再进行随机取出。</p></blockquote><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><blockquote><p>暂时写到这里，有兴趣的可以自己测一下或者实现一下……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> list </tag>
            
            <tag> random </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 实现文件分片上传</title>
      <link href="2020/10/31/springboot%20%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
      <url>2020/10/31/springboot%20%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>现在的项目中很多地方都会用到文件上传，不说百分百，但是绝对会占百分之九十（你可以反驳，但是我不接受），如果我们单纯的采用整个文件上传的方式，在遇到大文件就会出现各种花式问题，为了尽量避免这些坑，我们可以采用分片上传的方式将大文件分成不同的小文件进行上传</p></blockquote><h3 id="二、新建文件上传所需的VO文件"><a href="#二、新建文件上传所需的VO文件" class="headerlink" title="二、新建文件上传所需的VO文件"></a>二、新建文件上传所需的VO文件</h3><blockquote><p>1、新建 CheckMd5FileVO 文件以及 UploadVO 文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件MD5校验VO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;文件MD5校验VO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckMd5FileVO</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0：不分片，1：分片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;分片状态 0：不分片，1：分片&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件名&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件Md5（文件唯一表示）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件Md5（文件唯一表示）&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String fileMd5;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前分片下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;当前分片下标&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long chunk;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件大小（如果分片了，则是分片文件大小）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件大小 如果分片了，则是分片文件大小&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long fileSize;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String formData;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件后缀名&quot;, required = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传VO</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;文件上传VO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UploadVO</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 文件id WU_FILE_0</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名称 Beyond Compare.rar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件名称&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型 application/octet-stream</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后修改时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date lastModifiedDate;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分片片数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;分片片数&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long chunks;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前分片标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;当前分片标识&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long chunk;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分片设置大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;分片设置大小&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> Long chunkSize;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表单数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String formData;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件Md5(文件的唯一标识)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件md5值&quot;, required = true)</span></span><br><span class="line">    <span class="keyword">private</span> String fileMd5;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;文件名后缀&quot;, required = true)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSuffix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name.substring(name.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、新建-FileUtil-工具类"><a href="#三、新建-FileUtil-工具类" class="headerlink" title="三、新建 FileUtil 工具类"></a>三、新建 FileUtil 工具类</h3><blockquote><p>该工具类主要是为了处理分片文件的合并和临时文件的清理</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.FileChannel;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">randomAccessFile</span><span class="params">(File in, File out, Long seek)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raFile = <span class="keyword">null</span>;</span><br><span class="line">        BufferedInputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 以读写的方式打开目标文件</span></span><br><span class="line">            raFile = <span class="keyword">new</span> RandomAccessFile(out, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            raFile.seek(seek);</span><br><span class="line">            inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(in));</span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ((length = inputStream.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                raFile.write(buf, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (raFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    raFile.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除单个文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sPath 被删除文件的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 单个文件删除成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String sPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(sPath);</span><br><span class="line">        <span class="comment">// 路径为文件且不为空则进行删除</span></span><br><span class="line">        <span class="keyword">if</span> (file.isFile() &amp;&amp; file.exists()) &#123;</span><br><span class="line">            file.delete();</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除目录（文件夹）以及目录下的文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sPath 被删除目录的文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 目录删除成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteDirectory</span><span class="params">(String sPath)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果sPath不以文件分隔符结尾，自动添加文件分隔符</span></span><br><span class="line">        <span class="keyword">if</span> (!sPath.endsWith(File.separator)) &#123;</span><br><span class="line">            sPath = sPath + File.separator;</span><br><span class="line">        &#125;</span><br><span class="line">        File dirFile = <span class="keyword">new</span> File(sPath);</span><br><span class="line">        <span class="comment">// 如果dir对应的文件不存在，或者不是一个目录，则退出</span></span><br><span class="line">        <span class="keyword">if</span> (!dirFile.exists() || !dirFile.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 删除文件夹下的所有文件(包括子目录)</span></span><br><span class="line">        File[] files = dirFile.listFiles();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 删除子文件</span></span><br><span class="line">            <span class="keyword">if</span> (files[i].isFile()) &#123;</span><br><span class="line">                flag = deleteFile(files[i].getAbsolutePath());</span><br><span class="line">                <span class="keyword">if</span> (!flag)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="comment">// 删除子目录</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                flag = deleteDirectory(files[i].getAbsolutePath());</span><br><span class="line">                <span class="keyword">if</span> (!flag)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 删除当前目录</span></span><br><span class="line">        <span class="keyword">if</span> (dirFile.delete()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="四、新建-ChunkUploadService"><a href="#四、新建-ChunkUploadService" class="headerlink" title="四、新建 ChunkUploadService"></a>四、新建 ChunkUploadService</h3><blockquote><p>service 处理文件分片检查、文件上传等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.boran.demonstration.config.CustomConfig;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.config.Result;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.enums.ErrorCodeEnum;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.upload.util.FileUtil;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.upload.vo.CheckMd5FileVO;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.upload.vo.UploadVO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码中对应的以 CustomConfig.xxxx 的自行更换为自己对应的文件路径</span></span><br><span class="line"><span class="comment"> * 代码中出现的 ErrorCodeEnum.xxxx 的自行更换为自己对应的错误提示码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChunkUploadService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELIMITER = <span class="string">&quot;-&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传之前校验(整个文件、分片)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5FileVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">check</span><span class="params">(CheckMd5FileVO md5FileVO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (md5FileVO.getType() == <span class="keyword">null</span> || md5FileVO.getChunk() == <span class="keyword">null</span> || md5FileVO.getFileMd5() == <span class="keyword">null</span> || md5FileVO.getSuffix() == <span class="keyword">null</span> || md5FileVO.getFileName() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(ErrorCodeEnum.MISSING_REQUIRED_ARGUMENTS);</span><br><span class="line">        &#125;</span><br><span class="line">        Integer type = md5FileVO.getType();</span><br><span class="line">        Long chunk = md5FileVO.getChunk();</span><br><span class="line">        String fileName = md5FileVO.getFileMd5() + <span class="string">&quot;.&quot;</span> + md5FileVO.getSuffix();</span><br><span class="line">        Long fileSize = md5FileVO.getFileSize();</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) &#123;<span class="comment">// 未分片校验</span></span><br><span class="line">            String destFilePath = CustomConfig.fileSave + File.separator + fileName;</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destFilePath);</span><br><span class="line">            <span class="keyword">if</span> (destFile.exists() &amp;&amp; destFile.length() == fileSize) &#123;</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">&quot;url&quot;</span>, fileName);</span><br><span class="line">                map.put(<span class="string">&quot;size&quot;</span>, fileSize);</span><br><span class="line">                <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.error(ErrorCodeEnum.FILE_NOT_EXISTS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 分片校验</span></span><br><span class="line">            String fileMd5 = md5FileVO.getFileMd5();</span><br><span class="line">            String destFileDir = CustomConfig.fileSave + File.separator + fileMd5;</span><br><span class="line">            String destFileName = chunk + DELIMITER + fileName;</span><br><span class="line">            String destFilePath = destFileDir + File.separator + destFileName;</span><br><span class="line">            File destFile = <span class="keyword">new</span> File(destFilePath);</span><br><span class="line">            <span class="keyword">if</span> (destFile.exists() &amp;&amp; destFile.length() == fileSize) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.error(ErrorCodeEnum.CHUNK_EXISTS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.error(ErrorCodeEnum.CHUNK_NOT_EXISTS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分片上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">ChunkUploads</span><span class="params">(MultipartFile file, UploadVO uploadVO)</span> </span>&#123;</span><br><span class="line">        String fileMd5 = uploadVO.getFileMd5();</span><br><span class="line">        String fileName = fileMd5 + <span class="string">&quot;.&quot;</span> + uploadVO.getSuffix();</span><br><span class="line">        Long chunk = uploadVO.getChunk();<span class="comment">// 当前片</span></span><br><span class="line">        Long chunks = uploadVO.getChunks();<span class="comment">// 总共多少片</span></span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 分片目录创建</span></span><br><span class="line">        String chunkDirPath = CustomConfig.fileDispose + File.separator + fileMd5;</span><br><span class="line">        File chunkDir = <span class="keyword">new</span> File(chunkDirPath);</span><br><span class="line">        <span class="keyword">if</span> (!chunkDir.exists()) &#123;</span><br><span class="line">            chunkDir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 分片文件上传</span></span><br><span class="line">        String chunkFileName = chunk + DELIMITER + fileName;</span><br><span class="line">        String chunkFilePath = chunkDir + File.separator + chunkFileName;</span><br><span class="line">        File chunkFile = <span class="keyword">new</span> File(chunkFilePath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(chunkFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;分片上传出错&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.error(ErrorCodeEnum.CHUNK_UPLOAD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 合并分片</span></span><br><span class="line">        Long chunkSize = uploadVO.getChunkSize();</span><br><span class="line">        <span class="keyword">long</span> seek = chunkSize * chunk;</span><br><span class="line">        String destFilePath = CustomConfig.fileSave + File.separator + fileName;</span><br><span class="line">        File destFile = <span class="keyword">new</span> File(destFilePath);</span><br><span class="line">        <span class="keyword">if</span> (chunkFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;合并中......&quot;</span>);</span><br><span class="line">                FileUtil.randomAccessFile(chunkFile, destFile, seek);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;分片&#123;&#125;合并失败：&#123;&#125;&quot;</span>, chunkFile.getName(), e.getMessage());</span><br><span class="line">                <span class="keyword">return</span> Result.error(ErrorCodeEnum.CHUNK_MERGE_FAIL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (chunk == chunks - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 删除分片文件夹</span></span><br><span class="line">            System.out.println(<span class="string">&quot;删除分片文件夹......&quot;</span>);</span><br><span class="line">            FileUtil.deleteDirectory(chunkDirPath);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;url&quot;</span>, fileName);</span><br><span class="line">            <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(ErrorCodeEnum.UPLOADING);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未分片上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">UnChunkUploads</span><span class="params">(MultipartFile file, UploadVO uploadVO)</span> </span>&#123;</span><br><span class="line">        String suffix = uploadVO.getSuffix();</span><br><span class="line">        String fileName = uploadVO.getFileMd5() + <span class="string">&quot;.&quot;</span> + suffix;</span><br><span class="line">        <span class="comment">// 文件上传</span></span><br><span class="line">        File destFile = <span class="keyword">new</span> File(CustomConfig.fileSave + File.separator + fileName);</span><br><span class="line">        <span class="keyword">if</span> (file != <span class="keyword">null</span> &amp;&amp; !file.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 上传目录</span></span><br><span class="line">            File fileDir = <span class="keyword">new</span> File(CustomConfig.fileSave);</span><br><span class="line">            <span class="keyword">if</span> (!fileDir.exists()) &#123;</span><br><span class="line">                fileDir.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (destFile.exists()) &#123;</span><br><span class="line">                destFile.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                file.transferTo(destFile);</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">&quot;url&quot;</span>, fileName);</span><br><span class="line">                <span class="keyword">return</span> Result.ok(map);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">&quot;文件上传出错&quot;</span>, e);</span><br><span class="line">                <span class="keyword">return</span> Result.error(ErrorCodeEnum.FILE_UPLOAD_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.error(ErrorCodeEnum.UPLOAD_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、创建controller"><a href="#五、创建controller" class="headerlink" title="五、创建controller"></a>五、创建controller</h3><blockquote><p>新建接口，一个用于文件分片检查，一个用于文件上传</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.boran.demonstration.config.BaseController;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.config.Result;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.upload.service.ChunkUploadService;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.upload.vo.CheckMd5FileVO;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.upload.vo.UploadVO;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Api(tags = &quot;文件上传&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ChunkUploadService chunkUploadService;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件检查</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> md5FileVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件检查&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;check&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">check</span><span class="params">(CheckMd5FileVO md5FileVO)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> chunkUploadService.check(md5FileVO);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uploadVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;上传文件&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">save</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, UploadVO uploadVO)</span> </span>&#123;</span><br><span class="line">        Long chunk = uploadVO.getChunk();</span><br><span class="line">        <span class="keyword">if</span> (chunk == <span class="keyword">null</span>) &#123;<span class="comment">// 没有分片</span></span><br><span class="line">            <span class="keyword">return</span> chunkUploadService.UnChunkUploads(file, uploadVO);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 分片</span></span><br><span class="line">            <span class="keyword">return</span> chunkUploadService.ChunkUploads(file, uploadVO);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、结语"><a href="#六、结语" class="headerlink" title="六、结语"></a>六、结语</h3><blockquote><p>相关功能的测试结果就不贴了，有兴趣可以自己测试一下，不出意外的话，是没有问题的，当然了，出了问题概不负责，哈哈哈哈哈哈……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 通过 sigar 获取服务器 cpu、内存 等数据</title>
      <link href="2020/10/31/java%20%E9%80%9A%E8%BF%87%20sigar%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8%20cpu%E3%80%81%E5%86%85%E5%AD%98%20%E7%AD%89%E6%95%B0%E6%8D%AE/"/>
      <url>2020/10/31/java%20%E9%80%9A%E8%BF%87%20sigar%20%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8%20cpu%E3%80%81%E5%86%85%E5%AD%98%20%E7%AD%89%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><blockquote><p>今天来了个需求，需要实时监控服务器cpu跟内存参数的占用百分比。百度了一波性能监控方面的文章，看到很多文章都在使用 sigar，虽然我之前没接触过sigar，但是这丝毫不影响我跟随大流，反正大家都在用，也不差我一个</p></blockquote><h3 id="二、引入依赖"><a href="#二、引入依赖" class="headerlink" title="二、引入依赖"></a>二、引入依赖</h3><blockquote><p>首先，引入sigar包，gradle方式如下，maven方式自行百度<br><strong>友情提示</strong>：本文章所需要的文件都放在了文章末尾，有需要的自行下载即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.fusesource:sigar:1.6.4&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>windows环境下，将lib包下的sigar-amd64-winnt.dll，sigar-x86-winnt.dll，sigar-x86-winnt.lib 三个文件放入jdk的bin目录下面<br><strong>或者Windows下配置</strong>：根据自己的操作系统版本选择sigar-amd64-winnt.dll或sigar-x86-winnt.dll拷贝到C:\Windows\System32中<br><strong>Linux下配置</strong>：将lib包下的sigar-amd64-linux.so或libsigar-x86-linux.so拷贝到/usr/lib64或/lib64或/lib或/usr/lib目录下，如果不起作用，还需要sudochmod 744修改libsigar-amd64-linux.so文件权限</p></blockquote><h3 id="三、创建相关工具类"><a href="#三、创建相关工具类" class="headerlink" title="三、创建相关工具类"></a>三、创建相关工具类</h3><blockquote><p>创建controller如下，当然，我这里没有进行封装，全部裸奔在外的，需要我们自己封装一下再用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.boran.demonstration.config.BaseController;</span><br><span class="line"><span class="keyword">import</span> com.boran.demonstration.config.Result;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.hyperic.sigar.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: zp.wei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@DATE</span>: 2020/10/31 15:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;查看计算机相关信息&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/computer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerInformationController</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看计算机信息</span></span><br><span class="line"><span class="comment">     * 1，引入sigar.jar包</span></span><br><span class="line"><span class="comment">     * 2，windows环境下，将sigar-amd64-winnt.dll，sigar-x86-winnt.dll，sigar-x86-winnt.lib 三个文件放入jdk的bin目录下面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查看计算机信息&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/information&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">ComputerInformation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; all = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 内存信息</span></span><br><span class="line">            Map&lt;String, String&gt; memory = getMemory();</span><br><span class="line">            all.put(<span class="string">&quot;memory&quot;</span>, memory);</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// cpu信息</span></span><br><span class="line">            List&lt;Object&gt; cpu = getCpu();</span><br><span class="line">            all.put(<span class="string">&quot;cpu&quot;</span>, cpu);</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 文件系统信息</span></span><br><span class="line">            file();</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 网络信息</span></span><br><span class="line">            net();</span><br><span class="line">            System.out.println(<span class="string">&quot;----------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// System信息，从jvm获取</span></span><br><span class="line"><span class="comment">//            property();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;----------------------------------&quot;);</span></span><br><span class="line">            <span class="comment">// 操作系统信息</span></span><br><span class="line"><span class="comment">//            os();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;----------------------------------&quot;);</span></span><br><span class="line">            <span class="comment">// 用户信息</span></span><br><span class="line"><span class="comment">//            who();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;----------------------------------&quot;);</span></span><br><span class="line">            <span class="comment">// 以太网信息</span></span><br><span class="line"><span class="comment">//            ethernet();</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;----------------------------------&quot;);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> Result.ok(all);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SigarException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, String&gt; <span class="title">getMemory</span><span class="params">()</span> <span class="keyword">throws</span> SigarException </span>&#123;</span><br><span class="line">        Sigar sigar = <span class="keyword">new</span> Sigar();</span><br><span class="line">        Mem mem = sigar.getMem();</span><br><span class="line">        Swap swap = sigar.getSwap();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        map.put(<span class="string">&quot;memTotal&quot;</span>, mem.getTotal() / <span class="number">1024L</span> + <span class="string">&quot;K av&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;memUsed&quot;</span>, mem.getUsed() / <span class="number">1024L</span> + <span class="string">&quot;K used&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;memFree&quot;</span>, mem.getFree() / <span class="number">1024L</span> + <span class="string">&quot;K free&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;swapTotal&quot;</span>, swap.getTotal() / <span class="number">1024L</span> + <span class="string">&quot;K av&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;swapUsed&quot;</span>, swap.getUsed() / <span class="number">1024L</span> + <span class="string">&quot;K used&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;swapFree&quot;</span>, swap.getFree() / <span class="number">1024L</span> + <span class="string">&quot;K free&quot;</span>);</span><br><span class="line">        <span class="comment">// 内存总量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;内存总量: &quot;</span> + mem.getTotal() / <span class="number">1024L</span> + <span class="string">&quot;K av&quot;</span>);</span><br><span class="line">        <span class="comment">// 当前内存使用量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前内存使用量: &quot;</span> + mem.getUsed() / <span class="number">1024L</span> + <span class="string">&quot;K used&quot;</span>);</span><br><span class="line">        <span class="comment">// 当前内存剩余量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前内存剩余量: &quot;</span> + mem.getFree() / <span class="number">1024L</span> + <span class="string">&quot;K free&quot;</span>);</span><br><span class="line">        <span class="comment">// 交换区总量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;交换区总量: &quot;</span> + swap.getTotal() / <span class="number">1024L</span> + <span class="string">&quot;K av&quot;</span>);</span><br><span class="line">        <span class="comment">// 当前交换区使用量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前交换区使用量: &quot;</span> + swap.getUsed() / <span class="number">1024L</span> + <span class="string">&quot;K used&quot;</span>);</span><br><span class="line">        <span class="comment">// 当前交换区剩余量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前交换区剩余量: &quot;</span> + swap.getFree() / <span class="number">1024L</span> + <span class="string">&quot;K free&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cpu</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SigarException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List <span class="title">getCpu</span><span class="params">()</span> <span class="keyword">throws</span> SigarException </span>&#123;</span><br><span class="line">        Sigar sigar = <span class="keyword">new</span> Sigar();</span><br><span class="line">        CpuInfo infos[] = sigar.getCpuInfoList();</span><br><span class="line">        CpuPerc cpuList[] = sigar.getCpuPercList();</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 不管是单块CPU还是多CPU都适用</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; infos.length; i++) &#123;</span><br><span class="line">            CpuInfo info = infos[i];</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            map.put(<span class="string">&quot;number&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">            map.put(<span class="string">&quot;getMhz&quot;</span>, info.getMhz());</span><br><span class="line">            map.put(<span class="string">&quot;getVendor&quot;</span>, info.getVendor());</span><br><span class="line">            map.put(<span class="string">&quot;getModel&quot;</span>, info.getModel());</span><br><span class="line">            map.put(<span class="string">&quot;getCacheSize&quot;</span>, info.getCacheSize());</span><br><span class="line">            map.put(<span class="string">&quot;getUser&quot;</span>, CpuPerc.format(cpuList[i].getUser()));</span><br><span class="line">            map.put(<span class="string">&quot;getSys&quot;</span>, CpuPerc.format(cpuList[i].getSys()));</span><br><span class="line">            map.put(<span class="string">&quot;getWait&quot;</span>, CpuPerc.format(cpuList[i].getWait()));</span><br><span class="line">            map.put(<span class="string">&quot;getNice&quot;</span>, CpuPerc.format(cpuList[i].getNice()));</span><br><span class="line">            map.put(<span class="string">&quot;getIdle&quot;</span>, CpuPerc.format(cpuList[i].getIdle()));</span><br><span class="line">            map.put(<span class="string">&quot;getCombined&quot;</span>, CpuPerc.format(cpuList[i].getCombined()));</span><br><span class="line">            list.add(map);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;块CPU信息&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;CPU的总量MHz: &quot;</span> + info.getMhz());<span class="comment">// CPU的总量MHz</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU生产商: &quot;</span> + info.getVendor());<span class="comment">// 获得CPU的卖主，如：Intel</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU类别: &quot;</span> + info.getModel());<span class="comment">// 获得CPU的类别，如：Celeron</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU缓存数量: &quot;</span> + info.getCacheSize());<span class="comment">// 缓冲存储器数量</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU用户使用率: &quot;</span> + CpuPerc.format(cpuList[i].getUser()));<span class="comment">// 用户使用率</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU系统使用率: &quot;</span> + CpuPerc.format(cpuList[i].getSys()));<span class="comment">// 系统使用率</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU当前等待率: &quot;</span> + CpuPerc.format(cpuList[i].getWait()));<span class="comment">// 当前等待率</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU当前错误率: &quot;</span> + CpuPerc.format(cpuList[i].getNice()));<span class="comment">// 当前错误率</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU当前空闲率: &quot;</span> + CpuPerc.format(cpuList[i].getIdle()));<span class="comment">// 当前空闲率</span></span><br><span class="line">            System.out.println(<span class="string">&quot;CPU总的使用率: &quot;</span> + CpuPerc.format(cpuList[i].getCombined()));<span class="comment">// 总的使用率</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件系统信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">file</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Sigar sigar = <span class="keyword">new</span> Sigar();</span><br><span class="line">        FileSystem fslist[] = sigar.getFileSystemList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fslist.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分区的盘符名称&quot;</span> + i);</span><br><span class="line">            FileSystem fs = fslist[i];</span><br><span class="line">            <span class="comment">// 分区的盘符名称</span></span><br><span class="line">            System.out.println(<span class="string">&quot;盘符名称: &quot;</span> + fs.getDevName());</span><br><span class="line">            <span class="comment">// 分区的盘符名称</span></span><br><span class="line">            System.out.println(<span class="string">&quot;盘符路径: &quot;</span> + fs.getDirName());</span><br><span class="line">            System.out.println(<span class="string">&quot;盘符标志: &quot;</span> + fs.getFlags());<span class="comment">//</span></span><br><span class="line">            <span class="comment">// 文件系统类型，比如 FAT32、NTFS</span></span><br><span class="line">            System.out.println(<span class="string">&quot;盘符类型: &quot;</span> + fs.getSysTypeName());</span><br><span class="line">            <span class="comment">// 文件系统类型名，比如本地硬盘、光驱、网络文件系统等</span></span><br><span class="line">            System.out.println(<span class="string">&quot;盘符类型名: &quot;</span> + fs.getTypeName());</span><br><span class="line">            <span class="comment">// 文件系统类型</span></span><br><span class="line">            System.out.println(<span class="string">&quot;盘符文件系统类型: &quot;</span> + fs.getType());</span><br><span class="line">            FileSystemUsage usage = <span class="keyword">null</span>;</span><br><span class="line">            usage = sigar.getFileSystemUsage(fs.getDirName());</span><br><span class="line">            <span class="keyword">switch</span> (fs.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// TYPE_UNKNOWN ：未知</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// TYPE_NONE</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// TYPE_LOCAL_DISK : 本地硬盘</span></span><br><span class="line">                    <span class="comment">// 文件系统总大小</span></span><br><span class="line">                    System.out.println(fs.getDevName() + <span class="string">&quot;总大小: &quot;</span> + usage.getTotal() + <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">                    <span class="comment">// 文件系统剩余大小</span></span><br><span class="line">                    System.out.println(fs.getDevName() + <span class="string">&quot;剩余大小: &quot;</span> + usage.getFree() + <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">                    <span class="comment">// 文件系统可用大小</span></span><br><span class="line">                    System.out.println(fs.getDevName() + <span class="string">&quot;可用大小: &quot;</span> + usage.getAvail() + <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">                    <span class="comment">// 文件系统已经使用量</span></span><br><span class="line">                    System.out.println(fs.getDevName() + <span class="string">&quot;已经使用量: &quot;</span> + usage.getUsed() + <span class="string">&quot;KB&quot;</span>);</span><br><span class="line">                    <span class="keyword">double</span> usePercent = usage.getUsePercent() * <span class="number">100D</span>;</span><br><span class="line">                    <span class="comment">// 文件系统资源的利用率</span></span><br><span class="line">                    System.out.println(fs.getDevName() + <span class="string">&quot;资源的利用率: &quot;</span> + usePercent + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">// TYPE_NETWORK ：网络</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">// TYPE_RAM_DISK ：闪存</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:<span class="comment">// TYPE_CDROM ：光驱</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:<span class="comment">// TYPE_SWAP ：页面交换</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(fs.getDevName() + <span class="string">&quot;读出: &quot;</span> + usage.getDiskReads());</span><br><span class="line">            System.out.println(fs.getDevName() + <span class="string">&quot;写入: &quot;</span> + usage.getDiskWrites());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">net</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Sigar sigar = <span class="keyword">new</span> Sigar();</span><br><span class="line">        String ifNames[] = sigar.getNetInterfaceList();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ifNames.length; i++) &#123;</span><br><span class="line">            String name = ifNames[i];</span><br><span class="line">            NetInterfaceConfig ifconfig = sigar.getNetInterfaceConfig(name);</span><br><span class="line"><span class="comment">//            System.out.println(&quot;网络设备名: &quot; + name);// 网络设备名</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;IP地址: &quot; + ifconfig.getAddress());// IP地址</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;子网掩码: &quot; + ifconfig.getNetmask());// 子网掩码</span></span><br><span class="line">            <span class="keyword">if</span> ((ifconfig.getFlags() &amp; <span class="number">1L</span>) &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;!IFF_UP...skipping getNetInterfaceStat&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            NetInterfaceStat ifstat = sigar.getNetInterfaceStat(name);</span><br><span class="line">            System.out.println(name + <span class="string">&quot;接收的总包裹数:&quot;</span> + ifstat.getRxPackets());<span class="comment">// 接收的总包裹数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;发送的总包裹数:&quot;</span> + ifstat.getTxPackets());<span class="comment">// 发送的总包裹数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;接收到的总字节数:&quot;</span> + ifstat.getRxBytes());<span class="comment">// 接收到的总字节数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;发送的总字节数:&quot;</span> + ifstat.getTxBytes());<span class="comment">// 发送的总字节数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;接收到的错误包数:&quot;</span> + ifstat.getRxErrors());<span class="comment">// 接收到的错误包数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;发送数据包时的错误数:&quot;</span> + ifstat.getTxErrors());<span class="comment">// 发送数据包时的错误数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;接收时丢弃的包数:&quot;</span> + ifstat.getRxDropped());<span class="comment">// 接收时丢弃的包数</span></span><br><span class="line">            System.out.println(name + <span class="string">&quot;发送时丢弃的包数:&quot;</span> + ifstat.getTxDropped());<span class="comment">// 发送时丢弃的包数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * System信息，从jvm获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnknownHostException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*private static void property() throws UnknownHostException &#123;</span></span><br><span class="line"><span class="comment">        Runtime r = Runtime.getRuntime();</span></span><br><span class="line"><span class="comment">        Properties props = System.getProperties();</span></span><br><span class="line"><span class="comment">        InetAddress addr;</span></span><br><span class="line"><span class="comment">        addr = InetAddress.getLocalHost();</span></span><br><span class="line"><span class="comment">        String ip = addr.getHostAddress();</span></span><br><span class="line"><span class="comment">        Map&lt;String, String&gt; map = System.getenv();</span></span><br><span class="line"><span class="comment">        String userName = map.get(&quot;USERNAME&quot;);// 获取用户名</span></span><br><span class="line"><span class="comment">        String computerName = map.get(&quot;COMPUTERNAME&quot;);// 获取计算机名</span></span><br><span class="line"><span class="comment">        String userDomain = map.get(&quot;USERDOMAIN&quot;);// 获取计算机域名</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户名: &quot; + userName);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;计算机名: &quot; + computerName);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;计算机域名: &quot; + userDomain);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;本地ip地址: &quot; + ip);</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;本地主机名: &quot; + addr.getHostName());</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;JVM可以使用的总内存: &quot; + r.totalMemory());</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;JVM可以使用的剩余内存: &quot; + r.freeMemory());</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;JVM可以使用的处理器个数: &quot; + r.availableProcessors());</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的运行环境版本: &quot; + props.getProperty(&quot;java.version&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的运行环境供应商: &quot; + props.getProperty(&quot;java.vendor&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java供应商的URL: &quot; + props.getProperty(&quot;java.vendor.url&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的安装路径: &quot; + props.getProperty(&quot;java.home&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的虚拟机规范版本: &quot; + props.getProperty(&quot;java.vm.specification.version&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的虚拟机规范供应商: &quot; + props.getProperty(&quot;java.vm.specification.vendor&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的虚拟机规范名称: &quot; + props.getProperty(&quot;java.vm.specification.name&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的虚拟机实现版本: &quot; + props.getProperty(&quot;java.vm.version&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的虚拟机实现供应商: &quot; + props.getProperty(&quot;java.vm.vendor&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的虚拟机实现名称: &quot; + props.getProperty(&quot;java.vm.name&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java运行时环境规范版本: &quot; + props.getProperty(&quot;java.specification.version&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java运行时环境规范供应商: &quot; + props.getProperty(&quot;java.specification.vender&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java运行时环境规范名称: &quot; + props.getProperty(&quot;java.specification.name&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的类格式版本号: &quot; + props.getProperty(&quot;java.class.version&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;Java的类路径: &quot; + props.getProperty(&quot;java.class.path&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;加载库时搜索的路径列表: &quot; + props.getProperty(&quot;java.library.path&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;默认的临时文件路径: &quot; + props.getProperty(&quot;java.io.tmpdir&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;一个或多个扩展目录的路径: &quot; + props.getProperty(&quot;java.ext.dirs&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的名称: &quot; + props.getProperty(&quot;os.name&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的构架: &quot; + props.getProperty(&quot;os.arch&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的版本: &quot; + props.getProperty(&quot;os.version&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;文件分隔符: &quot; + props.getProperty(&quot;file.separator&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;路径分隔符: &quot; + props.getProperty(&quot;path.separator&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;行分隔符: &quot; + props.getProperty(&quot;line.separator&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户的账户名称: &quot; + props.getProperty(&quot;user.name&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户的主目录: &quot; + props.getProperty(&quot;user.home&quot;));</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;用户的当前工作目录: &quot; + props.getProperty(&quot;user.dir&quot;));</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作系统信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SigarException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*private static void os() &#123;</span></span><br><span class="line"><span class="comment">        OperatingSystem OS = OperatingSystem.getInstance();</span></span><br><span class="line"><span class="comment">        // 操作系统内核类型如： 386、486、586等x86</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统: &quot; + OS.getArch());</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统CpuEndian(): &quot; + OS.getCpuEndian());//</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统DataModel(): &quot; + OS.getDataModel());//</span></span><br><span class="line"><span class="comment">        // 系统描述</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的描述: &quot; + OS.getDescription());</span></span><br><span class="line"><span class="comment">        // 操作系统类型</span></span><br><span class="line"><span class="comment">        // System.out.println(&quot;OS.getName(): &quot; + OS.getName());</span></span><br><span class="line"><span class="comment">        // System.out.println(&quot;OS.getPatchLevel(): &quot; + OS.getPatchLevel());//</span></span><br><span class="line"><span class="comment">        // 操作系统的卖主</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的卖主: &quot; + OS.getVendor());</span></span><br><span class="line"><span class="comment">        // 卖主名称</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的卖主名: &quot; + OS.getVendorCodeName());</span></span><br><span class="line"><span class="comment">        // 操作系统名称</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统名称:  &quot; + OS.getVendorName());</span></span><br><span class="line"><span class="comment">        // 操作系统卖主类型</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统卖主类型: &quot; + OS.getVendorVersion());</span></span><br><span class="line"><span class="comment">        // 操作系统的版本号</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;操作系统的版本号: &quot; + OS.getVersion());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SigarException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*private static void who() throws SigarException &#123;</span></span><br><span class="line"><span class="comment">        Sigar sigar = new Sigar();</span></span><br><span class="line"><span class="comment">        Who who[] = sigar.getWhoList();</span></span><br><span class="line"><span class="comment">        if (who != null &amp;&amp; who.length &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">            for (int i = 0; i &lt; who.length; i++) &#123;</span></span><br><span class="line"><span class="comment">                // System.out.println(&quot;当前系统进程表中的用户名&quot; + String.valueOf(i));</span></span><br><span class="line"><span class="comment">                Who _who = who[i];</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;用户控制台: &quot; + _who.getDevice());</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;用户host: &quot; + _who.getHost());</span></span><br><span class="line"><span class="comment">                // System.out.println(&quot;getTime(): &quot; + _who.getTime());</span></span><br><span class="line"><span class="comment">                // 当前系统进程表中的用户名</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;当前系统进程表中的用户名: &quot; + _who.getUser());</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以太网信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SigarException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*private static void ethernet() throws SigarException &#123;</span></span><br><span class="line"><span class="comment">        Sigar sigar = null;</span></span><br><span class="line"><span class="comment">        sigar = new Sigar();</span></span><br><span class="line"><span class="comment">        String[] ifaces = sigar.getNetInterfaceList();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; ifaces.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            NetInterfaceConfig cfg = sigar.getNetInterfaceConfig(ifaces[i]);</span></span><br><span class="line"><span class="comment">            if (NetFlags.LOOPBACK_ADDRESS.equals(cfg.getAddress()) || (cfg.getFlags() &amp; NetFlags.IFF_LOOPBACK) != 0</span></span><br><span class="line"><span class="comment">                    || NetFlags.NULL_HWADDR.equals(cfg.getHwaddr())) &#123;</span></span><br><span class="line"><span class="comment">                continue;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            System.out.println(cfg.getName() + &quot;IP地址:&quot; + cfg.getAddress());// IP地址</span></span><br><span class="line"><span class="comment">            System.out.println(cfg.getName() + &quot;网关广播地址:&quot; + cfg.getBroadcast());// 网关广播地址</span></span><br><span class="line"><span class="comment">            System.out.println(cfg.getName() + &quot;网卡MAC地址:&quot; + cfg.getHwaddr());// 网卡MAC地址</span></span><br><span class="line"><span class="comment">            System.out.println(cfg.getName() + &quot;子网掩码:&quot; + cfg.getNetmask());// 子网掩码</span></span><br><span class="line"><span class="comment">            System.out.println(cfg.getName() + &quot;网卡描述信息:&quot; + cfg.getDescription());// 网卡描述信息</span></span><br><span class="line"><span class="comment">            System.out.println(cfg.getName() + &quot;网卡类型&quot; + cfg.getType());//</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、结语"><a href="#四、结语" class="headerlink" title="四、结语"></a>四、结语</h3><blockquote><p>相关功能的测试结果就不贴了，有兴趣可以自己测试一下，不出意外的话，是没有问题的，当然了，出了问题概不负责，哈哈哈哈哈哈……</p></blockquote><blockquote><p>注意：如果将该程序打成jar包后通过cmd命令运行，则无法获取相应的信息，提示找不到对应得dll文件，我们可将上述的文件放在cmd同目录即 C:\Windows\System32 目录下，则可成功运行获取相应信息……</p></blockquote><blockquote><p>最后，基本上你想要的服务器信息都有了……上面代码没写完，这个问题不大，改改还是能用的……附带提供文中相关文件下载<br><a href="https://download.csdn.net/download/wzp12321/12115424">sigar需要使用的相关文件（windows以及linux下）</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> sigar </tag>
            
            <tag> 监控服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 通过cmd 调用命令启动tomcat</title>
      <link href="2020/10/24/java%20%E9%80%9A%E8%BF%87cmd%20%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%AF%E5%8A%A8tomcat/"/>
      <url>2020/10/24/java%20%E9%80%9A%E8%BF%87cmd%20%E8%B0%83%E7%94%A8%E5%91%BD%E4%BB%A4%E5%90%AF%E5%8A%A8tomcat/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们有时候为了方便，公司会做一个项目集成管理，便于启动和关闭我们部署在服务器上面的项目，然后鼠标点点点就可以了，是不是很方便？我这里就采用了java的方式，嗯……仅限于参考……</p></blockquote><h2 id="一、踩坑"><a href="#一、踩坑" class="headerlink" title="一、踩坑"></a>一、踩坑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String exec = <span class="string">&quot;C:/software/apache-tomcat-8.5.24/bin/startup.bat&quot;</span>;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        runtime.exec(exec);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上所述，如果我们执行这段代码，那么我们的tomcat是启动不了的，我们用cmd试一下，请看下面，会出现错误信息，（在bin目录的父目录下调用除外）</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201024135541759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="二、修改"><a href="#二、修改" class="headerlink" title="二、修改"></a>二、修改</h2><blockquote><p>打开用于启动Tomcat的批处理文件startup.bat，首先判断CATALINA_HOME环境变量是否为空，如果为空，就将当前目录设为CATALINA_HOME的值。接着判断当前目录下是否存在bin\catalina.bat，如果文件不存在，将当前目录的父目录设为CATALINA_HOME的值。根据Tomcat安装目录的层次结构，最后CATALINA_HOME的值被设为Tomcat的安装目录。如果环境变量CATALINA_HOME已经存在，则通过这个环境变量调用bin目录下的“catalina.bat start”命令。于是了解到两个信息，一是Tomcat启动时，需要查找CATALINA_HOME这个环境变量，如果在Tomcat的bin目录下调用startup.bat，Tomcat会自动并正确设置CATALINA_HOME；二是执行startup.bat命令，实际上执行的是“catalina.bat start”命令</p></blockquote><blockquote><p>如果要想在任意目录下都能启动Tomcat，就需要设置CATALINA_HOME环境变量，你可以将CATALINA_HOME添加到Windows 系统的环境变量中，其值就是Tomcat的安装目录。添加CATALINA_HOME环境变量的过程和前述添加JAVA_HOME环境变量的过程是一样的。如果你不想在系统的环境变量中添加，也可以直接在startup.bat文件中进行设置</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> CATALINA_HOME=C:\software\apache<span class="literal">-tomcat</span><span class="literal">-8</span>.<span class="number">5.24</span></span><br></pre></td></tr></table></figure><blockquote><p>我这里采用将 CATALINA_HOME 添加到 startup.bat 文件中，shutdown.bat 同理。如果找不准位置，可以将设置CATALINA_HOME环境变量的这句代码放到文件的第一行。</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201024135826144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>在这里设置后，不论是通过cmd在其它目录下启动还是通过java代码启动tomcat都将无比丝滑……<br>注意：如果将该java程序打成war包放在tomcat下运行，则无法通过该程序启动其他tomcat，原因暂时未知……当然，可将其打包成jar包通过cmd运行程序，直接裸奔，则程序可成功运行，打开其他的tomcat……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> cmd命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将本地开发的项目提交到git</title>
      <link href="2020/10/23/%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0git/"/>
      <url>2020/10/23/%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%8F%90%E4%BA%A4%E5%88%B0git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p></blockquote><h2 id="一、git-与-svn-区别"><a href="#一、git-与-svn-区别" class="headerlink" title="一、git 与 svn 区别"></a>一、git 与 svn 区别</h2><blockquote><p>git 是分布式的，svn 不是：这是 git 和其它非分布式的版本控制系统，例如 svn ，CVS 等，最核心的区别。<br>git 把内容按元数据方式存储，而 SVN 是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。<br>git 分支和 SVN 的分支不同：分支在 svn 中一点都不特别，其实它就是版本库中的另外一个目录。<br>git 没有一个全局的版本号，而 svn 有：目前为止这是跟 svn 相比 git 缺少的最大的一个特征。<br>git 的内容完整性要优于 svn ：git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p></blockquote><h2 id="二、提交本地代码到git"><a href="#二、提交本地代码到git" class="headerlink" title="二、提交本地代码到git"></a>二、提交本地代码到git</h2><blockquote><p>1、本地安装git环境，步骤省略，提供 <a href="https://git-scm.com/download/win">git 下载传送门</a></p></blockquote><blockquote><p>2、初始化git项目，生成 .git 配置目录<br>进入项目根目录,右键 git bash here打开控制台 ，输入git init 即可完成</p></blockquote><blockquote><p>3、将项目加入本地git仓库<br>git add . （此处add后面有空格 和点号,意思是提交当前目录下所有文件）<br>git status<br>git commit -m “first commit”</p></blockquote><blockquote><p>4、连接云端仓库,将本地仓库代码提交到云端仓库<br>4.1、连接云端仓库<br>git remote add origin  <a href="https://gitee.com/xxx/xxx.git">https://gitee.com/xxx/xxx.git</a><br>4.2、 为解决本地与云端版本冲突，加上-f参数，push文件<br>git push –set-upstream origin master -f<br>提示输入云端仓库的用户名，密码，验证成功开始上传</p></blockquote><h2 id="三、git-修改用户名，邮箱"><a href="#三、git-修改用户名，邮箱" class="headerlink" title="三、git 修改用户名，邮箱"></a>三、git 修改用户名，邮箱</h2><blockquote><p>git config user.name 枯葉;<br>git config user.email <a href="mailto:&#x39;&#57;&#x39;&#x39;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;">&#x39;&#57;&#x39;&#x39;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a>;<br>全局修改：<br>git config  –global user.name 枯葉;<br>git config  –global user.email <a href="mailto:&#57;&#57;&#57;&#x39;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;">&#57;&#57;&#57;&#x39;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#x6d;</a>;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis 返回insert注解操作主键</title>
      <link href="2020/10/22/MyBatis%20%E8%BF%94%E5%9B%9Einsert%E6%B3%A8%E8%A7%A3%E6%93%8D%E4%BD%9C%E4%B8%BB%E9%94%AE/"/>
      <url>2020/10/22/MyBatis%20%E8%BF%94%E5%9B%9Einsert%E6%B3%A8%E8%A7%A3%E6%93%8D%E4%BD%9C%E4%B8%BB%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在向数据库插入数据时，需要保留插入数据的id，以便进行后续的update操作或者将id存入其他表作为外键。但是，在默认情况下，insert操作返回的是一个int值，它并非表示主键id，而是表示当前SQL语句影响的行数。</p></blockquote><h2 id="一、使用-Insert-注解时"><a href="#一、使用-Insert-注解时" class="headerlink" title="一、使用 @Insert 注解时"></a>一、使用 @Insert 注解时</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">Insert</span>(<span class="string">&quot;insert into file(create_at,update_at,file_name,file_url,file_md5) VALUES (#&#123;create_at&#125;,#&#123;update_at&#125;,#&#123;file_name&#125;,#&#123;file_url&#125;,#&#123;file_md5&#125;)&quot;</span>)</span><br><span class="line">@Options(useGeneratedKeys=<span class="literal">true</span>, keyProperty=<span class="string">&quot;id&quot;</span>, keyColumn=<span class="string">&quot;id&quot;</span>) //该注解用于返回主键</span><br><span class="line"><span class="built_in">void</span> <span class="keyword">save</span>(<span class="keyword">File</span> <span class="keyword">file</span>);</span><br></pre></td></tr></table></figure><blockquote><p>如上，@Options注解的属性大概解释</p><ul><li><strong>useGeneratedKeys</strong>：指对于支持自动生成记录主键的数据库，如：MySQL，此时设置useGeneratedKeys参数值为true，在执行添加记录之后可以获取到数据库自动生成的主键ID</li><li><strong>keyProperty</strong>：指传入对象的成员变量<ul><li><strong>keyColumn</strong>：指定数据库table中的主键<br>在调用了插入方法之后，@Options注解会自动为表的主键字段设置自增的值，并把它赋值给作为入参的DTO，进而可以直接从这个对象中获取新生成记录的主键</li></ul></li></ul></blockquote><h2 id="二、使用-xml-时"><a href="#二、使用-xml-时" class="headerlink" title="二、使用 xml 时"></a>二、使用 xml 时</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.wzp.history.back.model.File&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">  insert into file (create_at, update_at, file_name, file_url, file_md5) values (#&#123;create_at,jdbcType=BIGINT&#125;, #&#123;update_at,jdbcType=BIGINT&#125;, #&#123;file_name,jdbcType=VARCHAR&#125;, #&#123;file_url,jdbcType=VARCHAR&#125;, #&#123;file_md5,jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>如上示例，将@Options注解的三大属性分别写到上面示例位置就行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx停止或者重启</title>
      <link href="2020/10/17/nginx%20%E5%81%9C%E6%AD%A2%E5%92%8C%E9%87%8D%E5%90%AF/"/>
      <url>2020/10/17/nginx%20%E5%81%9C%E6%AD%A2%E5%92%8C%E9%87%8D%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="一、nginx重启文件"><a href="#一、nginx重启文件" class="headerlink" title="一、nginx重启文件"></a>一、nginx重启文件</h4><blockquote><p>我们不管是在日常开发中还是线上项目，都经常会使用到nginx，也会更改config文件，这样就会导致我们要经常的重启或者停止nginx，我们可以借助bat文件进行快速的停止或者重启行为，减轻工作量<br>在nginx根目录下新建一个 reload.bat 文件，文件里下如下命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h4 id="二、nginx-停止文件"><a href="#二、nginx-停止文件" class="headerlink" title="二、nginx 停止文件"></a>二、nginx 停止文件</h4><blockquote><p>nginx -s quit<br>pause</p></blockquote><blockquote><p>放在nginx根目录下，使用时双击运行就好了，这样能够更方便我们修改文件后的重启使用，减少一点点工作量……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 相关使用简介</title>
      <link href="2020/10/17/nginx%20%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
      <url>2020/10/17/nginx%20%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="一、nginx简介"><a href="#一、nginx简介" class="headerlink" title="一、nginx简介"></a>一、nginx简介</h4><blockquote><p>Nginx (engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。Nginx是由伊戈尔·赛索耶夫为俄罗斯访问量第二的Rambler.ru站点（俄文：Рамблер）开发的，第一个公开版本0.1.0发布于2004年10月4日。<br>其将源代码以类BSD许可证的形式发布，因它的稳定性、丰富的功能集、示例配置文件和低系统资源的消耗而闻名。2011年6月1日，nginx 1.0.4发布。<br>Nginx是一款轻量级的Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在BSD-like 协议下发行。其特点是占有内存少，并发能力强，事实上nginx的并发能力在同类型的网页服务器中表现较好</p></blockquote><h4 id="二、nginx-tomcat搭配"><a href="#二、nginx-tomcat搭配" class="headerlink" title="二、nginx+tomcat搭配"></a>二、nginx+tomcat搭配</h4><blockquote><p>1、nginx + tomcat的配置，这个至于版本的选择看你们自己，按理来说应该是通用的… 其中 nginx 配置如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">801</span>;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location /planeApi &#123;</span><br><span class="line">            proxy_set_header  Host $host;</span><br><span class="line">            proxy_set_header  X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-Proto https;</span><br><span class="line">            proxy_set_header  X-Forwarded-For $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-Host $remote_addr;</span><br><span class="line">            proxy_pass http:<span class="comment">//127.0.0.1:8095;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>2、tomcat server.xml 添加如下配置,tomcat 的webapp下的war包名字改为 planeApi.war</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path=<span class="string">&quot;/&quot;</span> docBase=<span class="string">&quot;C:\software\apache-tomcat-8.5.24\webapps&quot;</span> reloadable=<span class="string">&quot;true&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如上，我们在访问 <a href="http://localhost:801/planeApi">http://localhost:801/planeApi</a> 时会被nginx 转发到 <a href="http://localhost:8095/">http://localhost:8095</a> 上，即我们访问 <a href="http://localhost:801/planeApi/test">http://localhost:801/planeApi/test</a> 就是访问 <a href="http://localhost:8095/planeApi/test">http://localhost:8095/planeApi/test</a><br>有个小方法，我们不需要配置tomcat里面的server.xml文件，那就是直接把 war 包文件的名字修改为 ROOT.war，当然，这样修改的话，访问 <a href="http://localhost:801/planeApi/test">http://localhost:801/planeApi/test</a> 就是访问 <a href="http://localhost:8095/test">http://localhost:8095/test</a></p></blockquote><h4 id="三、nginx-本身配置"><a href="#三、nginx-本身配置" class="headerlink" title="三、nginx 本身配置"></a>三、nginx 本身配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location /plane &#123;</span><br><span class="line">            root   test;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上，我们访问 <a href="http://localhost/plane">http://localhost/plane</a> 时就会访问到 nginx 根目录下的 test/plane目录下的文件，即访问的是 <a href="http://localhost/plane/index.html">http://localhost/plane/index.html</a><br>这里出了一个坑，如下图，nginx 自身有一个默认的server配置，它也是监听的localhost 80 端口，然后因为优先级顺序，以及 location配置的关系，导致我们在访问 <a href="http://localhost/plane">http://localhost/plane</a> 时，它去 nginx 的 html 目录下找 plane 目录了，当然，这是肯定找不到的，会报错404……</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201017132332212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="四、nginx-的-location-常用的配置"><a href="#四、nginx-的-location-常用的配置" class="headerlink" title="四、nginx 的 location 常用的配置"></a>四、nginx 的 location 常用的配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line"> </span><br><span class="line">精确匹配，必须是<span class="number">127.0</span>.<span class="number">0.1</span>/</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location / &#123;</span><br><span class="line"> </span><br><span class="line">什么都可以匹配</span><br><span class="line">http:<span class="comment">//localhost/register11</span></span><br><span class="line">http:<span class="comment">//localhost/register111</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location = /login &#123;</span><br><span class="line"> </span><br><span class="line">精确匹配，必须是<span class="number">127.0</span>.<span class="number">0.1</span>/login</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location ^~ /<span class="keyword">static</span>/ &#123;</span><br><span class="line"> </span><br><span class="line">非精确匹配，并且不区分大小写，</span><br><span class="line">比如 http:<span class="comment">//127.0.0.1/static/js，http://localhost/static/a.html</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location ~ \.(gif|jpg|png|js|css)$ &#123;</span><br><span class="line"> </span><br><span class="line">区分大小写，以gif,jpg,js结尾</span><br><span class="line">比如 http:<span class="comment">//localhost/a.gif, http://localhost/b.jpg</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location ~* \.png$ &#123;</span><br><span class="line"> </span><br><span class="line">不区分大小写，匹配.png结尾的</span><br><span class="line">比如 http:<span class="comment">//localhost/b.png</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location !~ \.xhtml$ &#123;</span><br><span class="line"> </span><br><span class="line">区分大小写，匹配不以.xhtml结尾的</span><br><span class="line">比如 http:<span class="comment">//localhost/a.xhtml 会被排除掉</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">location !~* \.xhtml$ &#123;</span><br><span class="line"> </span><br><span class="line">不区分大小写，匹配不以.xhtml结尾的</span><br><span class="line">比如 http:<span class="comment">//localhost/a.XHTML，http://localhost/a.xhtml 都会被排除掉</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五、alias、root-的区别"><a href="#五、alias、root-的区别" class="headerlink" title="五、alias、root 的区别"></a>五、alias、root 的区别</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /plane &#123;</span><br><span class="line">    alias /test/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上，访问 /plane/ 里面的文件时，nginx 则会去 /tets/ 目录下找文件，alias 是一个目录别名的定义，alias 后面必须用 / 结束，否则找不到文件，到时候会懵逼的……</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /plane &#123;</span><br><span class="line">    root test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如上，访问 /plane/ 里面的文件时，nginx 则会去 /tets/plane/ 目录下找文件，root 是 最上层根目录的定义，后面的 / 可有可无，不重要，也不影响……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 生成二维码或者加带有图片log的二维码</title>
      <link href="2020/10/17/Spring%20boot%20%E4%BD%BF%E7%94%A8mybatis%20generator%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%8F%92%E4%BB%B6/"/>
      <url>2020/10/17/Spring%20boot%20%E4%BD%BF%E7%94%A8mybatis%20generator%20%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="一、MyBatis-Generator-诞生背景"><a href="#一、MyBatis-Generator-诞生背景" class="headerlink" title="一、MyBatis Generator 诞生背景"></a>一、MyBatis Generator 诞生背景</h4><blockquote><p>虽然MyBatis是一个简单易学的框架，但是配置XML文件也是一件相当繁琐的一个过程，而且会出现很多不容易定位的错误。当在工作中需要生成大量对象的时候，有太多的重复劳动，简直是生无可恋。所以，官方开发了 MyBatis Generator。它只需要很少量的简单配置，就可以完成大量的表到Java对象的生成工作，拥有零出错和速度快的优点，让开发人员解放出来更专注于业务逻辑的开发。</p></blockquote><h4 id="二、MyBatis-Generator-简介"><a href="#二、MyBatis-Generator-简介" class="headerlink" title="二、MyBatis Generator 简介"></a>二、MyBatis Generator 简介</h4><blockquote><p>官网的MyBatis Generator使用介绍，请点击下面的链接：<a href="http://mybatis.org/generator/index.html">MyBatis Generator官网介绍</a><br>MyBatis Generator 生成的文件包含三类：</p><ul><li>Model实体文件，一个数据库表对应生成一个 Model 实体； </li><li>Mapper接口文件，数据数操作方法都在此接口中定义；</li><li>Mapper XML配置文件</li></ul></blockquote><h4 id="三、创建一个springboot项目"><a href="#三、创建一个springboot项目" class="headerlink" title="三、创建一个springboot项目"></a>三、创建一个springboot项目</h4><blockquote><p>这段代码就不贴了</p></blockquote><h4 id="四、引入依赖"><a href="#四、引入依赖" class="headerlink" title="四、引入依赖"></a>四、引入依赖</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis generator 自动生成代码插件 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.3.7&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">                    &lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">                    &lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h4 id="五、yml配置"><a href="#五、yml配置" class="headerlink" title="五、yml配置"></a>五、yml配置</h4><blockquote><p>resource文件夹下的application.properties文件删除，创建一个新的application.yml配置文件，在里面写相关配置，然后添加下面这个……</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  # mapper映射xml文件的所在路径</span><br><span class="line">  mapper-locations: classpath:mapping<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  # 对应实体类的路径</span></span><br><span class="line"><span class="comment">  type-aliases-package: com.wzp.wzx.*</span></span><br><span class="line"><span class="comment">  # 驼峰命名规范</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br></pre></td></tr></table></figure><h4 id="六、xml配置"><a href="#六、xml配置" class="headerlink" title="六、xml配置"></a>六、xml配置</h4><blockquote><p>就是下面这个东西，当然，什么创建数据库啊啥的我就不写了……</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt; &lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">&lt;generatorConfiguration&gt; </span><br><span class="line">    &lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包 这玩意儿要下载，去网上搜一下下载下来--&gt;</span><br><span class="line">    &lt;classPathEntry location=<span class="string">&quot;E:\dataSourceDriver\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;</span><br><span class="line">    &lt;context id=<span class="string">&quot;DB2Tables&quot;</span> targetRuntime=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span><br><span class="line">        &lt;commentGenerator&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;suppressDate&quot;</span> value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">            &lt;!-- 是否去除自动生成的注释 <span class="keyword">true</span>：是 ： <span class="keyword">false</span>:否 --&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;suppressAllComments&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;/commentGenerator&gt;</span><br><span class="line">        &lt;!--数据库链接URL，用户名、密码 --&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> connectionURL=<span class="string">&quot;jdbc:mysql://127.0.0.1/test&quot;</span> userId=<span class="string">&quot;root&quot;</span></span><br><span class="line">                        password=&quot;root&quot;&gt;&lt;/jdbcConnection&gt;</span><br><span class="line">        &lt;javaTypeResolver&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;forceBigDecimals&quot;</span> value=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">        &lt;/javaTypeResolver&gt;</span><br><span class="line">        &lt;!-- 生成模型的包名和位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=<span class="string">&quot;com.wzp.wzx.admin.entity&quot;</span> targetProject=<span class="string">&quot;src/main/java&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;trimStrings&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;/javaModelGenerator&gt;</span><br><span class="line">        &lt;!-- 生成映射文件的包名和位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=<span class="string">&quot;mapping&quot;</span> targetProject=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;/sqlMapGenerator&gt;</span><br><span class="line">        &lt;!-- 生成DAO的包名和位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator type=<span class="string">&quot;mapper&quot;</span> targetPackage=<span class="string">&quot;com.wzp.wzx.admin.mapper&quot;</span> targetProject=<span class="string">&quot;src/main/java&quot;</span>&gt;</span><br><span class="line">            &lt;property name=<span class="string">&quot;enableSubPackages&quot;</span> value=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">        &lt;/javaClientGenerator&gt;</span><br><span class="line">        &lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;</span><br><span class="line">        &lt;table tableName=<span class="string">&quot;Admin&quot;</span> domainObjectName=<span class="string">&quot;User&quot;</span> enableCountByExample=<span class="string">&quot;false&quot;</span> enableUpdateByExample=<span class="string">&quot;false&quot;</span></span><br><span class="line">               enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：上面文件里面相应的位置根据自己的项目去更改，然后下面这玩意儿要下载，去网上搜一下下载下来</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;classPathEntry location=<span class="string">&quot;E:\dataSourceDriver\mysql-connector-java-5.1.6.jar&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="七，启动"><a href="#七，启动" class="headerlink" title="七，启动"></a>七，启动</h4><blockquote><p>1、点击Edit Configurations</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201017125259397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>2、添加运行配置</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201017125403574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>3、点击运行</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201017125449857.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>4、最后生成的文件目录</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201017125521579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><blockquote><p>5、打开类SpringbootApplication.java，我们需要添加一个注解<br>@MapperScan(“com.winter.mapper”)  //将项目中对应的mapper类的路径加进来就可以了</p></blockquote><h4 id="八、结尾"><a href="#八、结尾" class="headerlink" title="八、结尾"></a>八、结尾</h4><blockquote><p>测试我就没有贴出来了，可以自己写一个Controller测一下，文章中还有很多也没有贴，只是贴了稍微重要的，比如对于生成后的文件内容这些就没有贴了（毕竟每个人的数据库表不一样，内容就不一样的……）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot2.0 </tag>
            
            <tag> MyBatis Generator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重置Studio 3T的试用时间</title>
      <link href="2020/10/11/%E9%87%8D%E7%BD%AEStudio%203T%E7%9A%84%E8%AF%95%E7%94%A8%E6%97%B6%E9%97%B4/"/>
      <url>2020/10/11/%E9%87%8D%E7%BD%AEStudio%203T%E7%9A%84%E8%AF%95%E7%94%A8%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一般来说，我们会用到Studio 3T来操作mongodb数据库，但是呢，Studio 3T收钱啊，我们又不喜欢花钱买，只想白嫖，所以就只能想其它办法了，比如重置它的使用时间……当然了，还是建议自己掏钱买才是最正确的做法</p></blockquote><blockquote><p>那么怎么重置时间呢，<br>首先创建一个reset-studio-3t.bat 文件，并在文件中写入下面的内容</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo</span> off</span><br><span class="line">ECHO 重置Studio <span class="number">3</span>T的使用日期......</span><br><span class="line">FOR /f <span class="string">&quot;tokens=1,2,* &quot;</span> %%<span class="function">i <span class="title">IN</span> <span class="params">(<span class="string">&#x27;reg query &quot;HKEY_CURRENT_USER\Software\JavaSoft\Prefs\3t\mongochef\enterprise&quot; ^| find /V &quot;installation&quot; ^| find /V &quot;HKEY&quot;&#x27;</span>)</span> DO ECHO yes | reg add &quot;HKEY_CURRENT_USER\Software\JavaSoft\Prefs\3t\mongochef\enterprise&quot; /v %%i /t REG_SZ /d &quot;&quot;</span></span><br><span class="line"><span class="function">ECHO 重置完成, 按任意键退出......</span></span><br><span class="line"><span class="function">pause&gt;nul</span></span><br><span class="line"><span class="function">exit</span></span><br></pre></td></tr></table></figure><blockquote><p>最后，在每次要使用它的时候双击运行就行了……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> Studio3T </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 生成二维码或者加带有图片log的二维码</title>
      <link href="2020/10/11/springboot%20%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%88%96%E8%80%85%E5%8A%A0%E5%B8%A6%E6%9C%89%E5%9B%BE%E7%89%87log%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>2020/10/11/springboot%20%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%88%96%E8%80%85%E5%8A%A0%E5%B8%A6%E6%9C%89%E5%9B%BE%E7%89%87log%E7%9A%84%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这一篇文章是针对上一篇给图片加二维码的一个完善（或者叫升级？），实现生成二维码以及生成带有log图片的二维码，这样我们就可以把自己骚气的头像加在二维码上面</p></blockquote><blockquote><p>首先是引入依赖，gradle是引入下面这两个，maven引入自行搜索</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">&quot;com.google.zxing:core:3.4.0&quot;</span>)</span><br><span class="line">compile(<span class="string">&quot;com.google.zxing:javase:3.4.0&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>然后进入正文，首先创建一个生成二维码的工具类  QRCodeUtil</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzp.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.RoundRectangle2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成二维码的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QRCodeUtil</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHARSET = <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FORMAT_NAME = <span class="string">&quot;JPG&quot;</span>;</span><br><span class="line">    <span class="comment">// 二维码尺寸</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QRCODE_SIZE = <span class="number">300</span>;</span><br><span class="line">    <span class="comment">// LOGO宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIDTH = <span class="number">60</span>;</span><br><span class="line">    <span class="comment">// LOGO高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEIGHT = <span class="number">60</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BufferedImage <span class="title">createImage</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">        BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,hints);</span><br><span class="line">        <span class="keyword">int</span> width = bitMatrix.getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? <span class="number">0xFF000000</span> : <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (imgPath == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(imgPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入图片</span></span><br><span class="line">        QRCodeUtil.insertImage(image, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertImage</span><span class="params">(BufferedImage source, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(imgPath);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;&quot;</span> + imgPath + <span class="string">&quot;该文件不存在！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(<span class="keyword">new</span> File(imgPath));</span><br><span class="line">        <span class="keyword">int</span> width = src.getWidth(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">int</span> height = src.getHeight(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (needCompress) &#123; <span class="comment">// 压缩LOGO</span></span><br><span class="line">            <span class="keyword">if</span> (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>); <span class="comment">// 绘制缩小后的图</span></span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入LOGO</span></span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        <span class="keyword">int</span> x = (QRCODE_SIZE - width) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> y = (QRCODE_SIZE - height) / <span class="number">2</span>;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, <span class="keyword">null</span>);</span><br><span class="line">        Shape shape = <span class="keyword">new</span> RoundRectangle2D.Float(x, y, width, width, <span class="number">6</span>, <span class="number">6</span>);</span><br><span class="line">        graph.setStroke(<span class="keyword">new</span> BasicStroke(<span class="number">3f</span>));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, String destPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, <span class="keyword">new</span> File(destPath));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">encode</span><span class="params">(String content, String imgPath, <span class="keyword">boolean</span> needCompress)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mkdirs</span><span class="params">(String destPath)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(destPath);</span><br><span class="line">        <span class="comment">// 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)</span></span><br><span class="line">        <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, String imgPath, OutputStream output, <span class="keyword">boolean</span> needCompress)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String content, OutputStream output)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        QRCodeUtil.encode(content, <span class="keyword">null</span>, output, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>二、创建两个controller，一个是用来生成”单纯”的二维码，一个是带有骚气图片的二维码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据数据生成二维码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;QrCode&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">QrCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    ServletOutputStream stream = <span class="keyword">null</span>;</span><br><span class="line">    String code = request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stream = response.getOutputStream();</span><br><span class="line">        <span class="comment">//使用工具类生成二维码</span></span><br><span class="line">        QRCodeUtil.encode(code, stream);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.getStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stream.flush();</span><br><span class="line">            stream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据数据生成带有logo二维码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/createLogoQrCode&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createLogoQRCode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ServletOutputStream stream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stream = response.getOutputStream();</span><br><span class="line">        String logoPath = <span class="string">&quot;F://logo.jpg&quot;</span>;</span><br><span class="line">        <span class="comment">//使用工具类生成二维码</span></span><br><span class="line">        String code = request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        QRCodeUtil.encode(code, logoPath, stream, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.getStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stream != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stream.flush();</span><br><span class="line">            stream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>也可根据自己的需求进行相关改进</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二维码 </tag>
            
            <tag> springboot2.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 给图片加二维码</title>
      <link href="2020/10/04/springboot%20%E7%BB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
      <url>2020/10/04/springboot%20%E7%BB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>springboot的功能逐渐强大，除了可以给图片加水印以外，还能给图片加上二维码，支持私人订制，哈哈哈哈，废话不多说，直接上代码</p></blockquote><blockquote><p>首先是引入依赖，gradle是引入下面这两个，maven引入自行搜索</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">compile(<span class="string">&quot;com.google.zxing:core:3.4.0&quot;</span>)</span><br><span class="line">compile(<span class="string">&quot;com.google.zxing:javase:3.4.0&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>然后进入正文</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/watermarkImages&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">watermarkImages</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//获取原始图片文件</span></span><br><span class="line">    String srcImgPath = <span class="string">&quot;F://bg1.png&quot;</span>;</span><br><span class="line">    String fileNameType = srcImgPath.substring(srcImgPath.lastIndexOf(<span class="string">&quot;.&quot;</span>), srcImgPath.length());</span><br><span class="line">    String tarImgPath = CustomConfig.diskLocation + System.currentTimeMillis() + fileNameType; <span class="comment">//待存储的地址</span></span><br><span class="line">    addWaterMark(srcImgPath, tarImgPath);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 在一张背景图上添加二维码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bigImgPath 背景图的路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outPathWithFileName 输出路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWaterMark</span><span class="params">(String bigImgPath, String outPathWithFileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 读取原图片信息</span></span><br><span class="line">    File srcImgFile = <span class="keyword">new</span> File(bigImgPath);<span class="comment">//得到文件</span></span><br><span class="line">    Image srcImg = ImageIO.read(srcImgFile);<span class="comment">//文件转化为图片</span></span><br><span class="line">    <span class="keyword">int</span> srcImgWidth = srcImg.getWidth(<span class="keyword">null</span>);<span class="comment">//获取图片的宽</span></span><br><span class="line">    <span class="keyword">int</span> srcImgHeight = srcImg.getHeight(<span class="keyword">null</span>);<span class="comment">//获取图片的高</span></span><br><span class="line">    <span class="comment">// 加水印</span></span><br><span class="line">    BufferedImage bufImg = <span class="keyword">new</span> BufferedImage(srcImgWidth, srcImgHeight, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    Graphics2D g = bufImg.createGraphics();</span><br><span class="line">    g.drawImage(srcImg, <span class="number">0</span>, <span class="number">0</span>, srcImgWidth, srcImgHeight, <span class="keyword">null</span>);</span><br><span class="line">    String content = <span class="string">&quot;时光蹉跎看淡岁月你我&quot;</span>;</span><br><span class="line">    <span class="comment">//使用工具类生成二维码</span></span><br><span class="line">    Image image = QRCodeUtil.createImages(content);</span><br><span class="line">    <span class="comment">//将小图片绘到大图片上,500,300 .表示你的小图片在大图片上的位置。</span></span><br><span class="line">    g.drawImage(image, <span class="number">500</span>, <span class="number">500</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//设置颜色。</span></span><br><span class="line">    g.setColor(Color.WHITE);</span><br><span class="line">    g.dispose();</span><br><span class="line">    <span class="comment">// 输出图片</span></span><br><span class="line">    FileOutputStream outImgStream = <span class="keyword">new</span> FileOutputStream(outPathWithFileName);</span><br><span class="line">    ImageIO.write(bufImg, <span class="string">&quot;png&quot;</span>, outImgStream);</span><br><span class="line">    System.out.println(<span class="string">&quot;添加水印完成&quot;</span>);</span><br><span class="line">    outImgStream.flush();</span><br><span class="line">    outImgStream.close();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 生成二维码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 二维码里面的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">createImages</span><span class="params">(String content)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Hashtable hints = <span class="keyword">new</span> Hashtable();</span><br><span class="line">    hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">    hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">    hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);</span><br><span class="line">    BitMatrix bitMatrix = <span class="keyword">new</span> MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, <span class="number">192</span>, <span class="number">192</span>, hints);</span><br><span class="line">    <span class="keyword">int</span> width = bitMatrix.getWidth();</span><br><span class="line">    <span class="keyword">int</span> height = bitMatrix.getHeight();</span><br><span class="line">    BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            image.setRGB(x, y, bitMatrix.get(x, y) ? <span class="number">0xFF000000</span> : <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> image;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring boot 使用外部字体给图片加水印</title>
      <link href="2020/10/04/spring%20boot%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%AD%97%E4%BD%93%E7%BB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E6%B0%B4%E5%8D%B0/"/>
      <url>2020/10/04/spring%20boot%20%E4%BD%BF%E7%94%A8%E5%A4%96%E9%83%A8%E5%AD%97%E4%BD%93%E7%BB%99%E5%9B%BE%E7%89%87%E5%8A%A0%E6%B0%B4%E5%8D%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>springboot除了能够使用系统自带的字体给图片加水印以外，还支持使用外部字体给图片加水印的，具体怎么做请看下面代码<br>这第一步当然是在网上下载一款字体啦，然后把下载的字体放在对应的文件位置，接下来就是代码了</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadFontController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> IOException, FontFormatException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">&quot;E://包图小白体.ttf&quot;</span>);</span><br><span class="line">        Font dynamicFont = Font.createFont(Font.TRUETYPE_FONT, file);</span><br><span class="line"><span class="comment">//      方法2引用外部字体有可能会失败不起作用，建议使用方法3</span></span><br><span class="line"><span class="comment">//        Font font = new Font(&quot;微软雅黑&quot;, Font.PLAIN, 35); //水印字体 方法1</span></span><br><span class="line"><span class="comment">//        Font font = new Font(dynamicFont.getName(), Font.PLAIN, 35); //水印字体 方法2</span></span><br><span class="line">        Font font = dynamicFont.deriveFont(Font.PLAIN, <span class="number">35</span>); <span class="comment">//水印字体 方法3</span></span><br><span class="line">        String srcImgPath = <span class="string">&quot;E://15.jpg&quot;</span>; <span class="comment">//源图片地址</span></span><br><span class="line">        String tarImgPath = <span class="string">&quot;E://&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.jpg&quot;</span>; <span class="comment">//待存储的地址</span></span><br><span class="line">        String waterMarkContent = <span class="string">&quot;时光蹉跎，看淡岁月你我&quot;</span>;  <span class="comment">//水印内容</span></span><br><span class="line">        Color color = <span class="keyword">new</span> Color(<span class="number">225</span>, <span class="number">225</span>, <span class="number">60</span>); <span class="comment">//水印图片色彩以及透明度</span></span><br><span class="line">        addWaterMark(srcImgPath, tarImgPath, waterMarkContent, color, font);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addWaterMark</span><span class="params">(String srcImgPath, String tarImgPath, Color markContentColor, String content, Font font)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 读取原图片信息</span></span><br><span class="line">        File srcImgFile = <span class="keyword">new</span> File(srcImgPath);<span class="comment">//得到文件</span></span><br><span class="line">        Image srcImg = ImageIO.read(srcImgFile);<span class="comment">//文件转化为图片</span></span><br><span class="line">        <span class="keyword">int</span> srcImgWidth = srcImg.getWidth(<span class="keyword">null</span>);<span class="comment">//获取图片的宽</span></span><br><span class="line">        <span class="keyword">int</span> srcImgHeight = srcImg.getHeight(<span class="keyword">null</span>);<span class="comment">//获取图片的高</span></span><br><span class="line">        <span class="comment">// 加水印</span></span><br><span class="line">        BufferedImage bufImg = <span class="keyword">new</span> BufferedImage(srcImgWidth, srcImgHeight, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Graphics2D g = bufImg.createGraphics();</span><br><span class="line">        g.drawImage(srcImg, <span class="number">0</span>, <span class="number">0</span>, srcImgWidth, srcImgHeight, <span class="keyword">null</span>);</span><br><span class="line">        g.setColor(markContentColor); <span class="comment">//根据图片的背景设置水印颜色</span></span><br><span class="line">        g.setFont(font);  <span class="comment">//设置字体</span></span><br><span class="line">        <span class="comment">//设置水印的坐标 如果水印长度超过图片宽度则换行</span></span><br><span class="line">        <span class="keyword">int</span> fontLen = getWatermarkLength(content, g); <span class="comment">// 水印文字总长度</span></span><br><span class="line">        <span class="keyword">int</span> line = fontLen / srcImgWidth;<span class="comment">//文字长度相对于图片宽度应该有多少行</span></span><br><span class="line">        <span class="keyword">int</span> y = (line + <span class="number">1</span>) * font.getSize();</span><br><span class="line">        System.out.println(<span class="string">&quot;水印文字总长度:&quot;</span> + fontLen + <span class="string">&quot;,图片宽度:&quot;</span> + srcImgWidth + <span class="string">&quot;,字符个数:&quot;</span> + content.length());</span><br><span class="line">        <span class="comment">//文字叠加,自动换行叠加</span></span><br><span class="line">        <span class="keyword">int</span> tempX = <span class="number">50</span>; <span class="comment">// 文字初始x坐标位置</span></span><br><span class="line">        <span class="keyword">int</span> tempY = y;  <span class="comment">// 文字初始y坐标位置</span></span><br><span class="line">        <span class="keyword">int</span> tempCharLen;<span class="comment">//单字符长度</span></span><br><span class="line">        <span class="keyword">int</span> tempLineLen = <span class="number">0</span>;<span class="comment">//单行字符总长度临时计算</span></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> tempChar = content.charAt(i);</span><br><span class="line">            tempCharLen = getCharLen(tempChar, g);</span><br><span class="line">            tempLineLen += tempCharLen;</span><br><span class="line">            <span class="keyword">if</span> (tempLineLen &gt;= srcImgWidth - <span class="number">70</span>) &#123;</span><br><span class="line">                <span class="comment">//长度已经满一行,进行文字叠加</span></span><br><span class="line">                g.drawString(sb.toString(), tempX, tempY);</span><br><span class="line">                sb.delete(<span class="number">0</span>, sb.length());<span class="comment">//清空内容,重新追加</span></span><br><span class="line">                tempY += font.getSize();</span><br><span class="line">                tempLineLen = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(tempChar);<span class="comment">//追加字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        g.drawString(sb.toString(), tempX, tempY);<span class="comment">//最后叠加余下的文字</span></span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="comment">// 输出图片</span></span><br><span class="line">        FileOutputStream outImgStream = <span class="keyword">new</span> FileOutputStream(tarImgPath);</span><br><span class="line">        ImageIO.write(bufImg, <span class="string">&quot;jpg&quot;</span>, outImgStream);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加水印完成&quot;</span>);</span><br><span class="line">        outImgStream.flush();</span><br><span class="line">        outImgStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取水印文字总长度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waterMarkContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> g</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWatermarkLength</span><span class="params">(String waterMarkContent, Graphics2D g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> g.getFontMetrics(g.getFont()).charsWidth(waterMarkContent.toCharArray(), <span class="number">0</span>, waterMarkContent.length());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取水印对应文字的位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> g</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCharLen</span><span class="params">(<span class="keyword">char</span> c, Graphics2D g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> g.getFontMetrics(g.getFont()).charWidth(c);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>经过本人亲测，妥妥的，附上一个获取计算文字占的像素长度方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//计算文字占的像素长度</span></span><br><span class="line"><span class="keyword">int</span> sw = getSw(dynamicFont, content, fontSize);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSw</span><span class="params">(Font dynamicFont, String content, <span class="keyword">int</span> fontSize)</span> </span>&#123;</span><br><span class="line">        FontMetrics fm = FontDesignMetrics.getMetrics(dynamicFont.deriveFont(Font.PLAIN, fontSize));</span><br><span class="line">        <span class="keyword">return</span> fm.stringWidth(content);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西安游记</title>
      <link href="2020/09/29/%E8%A5%BF%E5%AE%89%E6%B8%B8%E8%AE%B0/"/>
      <url>2020/09/29/%E8%A5%BF%E5%AE%89%E6%B8%B8%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="/img/lvyou/IMG_20200925_151647.jpg" alt="Alt text"><br><strong>第一天</strong><br>    酒店订在钟楼附近，主要是出行方便，到达西安后，可以先去酒店放置行李，然后出来逛逛旁边的钟楼和鼓楼，顺道去逛逛回民街，然后有兴趣的可以去城墙，门票54块钱，城墙上面提供自行车，单人座的45块钱3个小时，双人座的90块钱3个小时，如果是一个人的话，城墙就没必要去了，毕竟一个人还是有些无聊（亲身体验，无聊至极），两人及其以上的话可以上去走一段或者租自行车骑行，然后看个人意愿在哪个门下，然后骑个共享自行车二十分钟左右就可以回到回民街，几条街吃的喝的都有（顺便解决晚饭），逛三个小时以上完全不是问题。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/lvyou/IMG_20200925_191002.jpg" alt="Alt text"><br><strong>第二天</strong><br>    可以选择步行至北大街地铁口（因为顺道解决早饭），乘坐一号线，坐到终点站纺织城，然后从D口出去，就到公交站了，坐游（5）306路线，车费五块钱到兵马俑（吐槽一句，该线路公交只收现金，个人备好，考虑到回来还要去华清宫，所以备十块的零钱）然后到了兵马俑以后，自行导航到售票厅，扫描小程序进行购票，门票120大洋，然后进去以后拼团找一个讲解，一个人二十块（没得讲解，真的只能走马观花，除非你的历史很好）然后时间大概是两个小时，出来后，跟着大部队去吃午饭，然后坐游（5）306路往回坐到华清宫（有索道可到山顶，然后从山顶逛下来，也可以自行上山，下山），门票也是120，进去后可以到处看看，拍拍照，顺道看一下西安事变的相关，蹭一下别人的解说，听一下，哈哈哈哈，然后有兴趣你可以留在晚上看长恨歌表演（这个要单独买票，好像是三百多），然后表演完了以后只能打车回市区啦，因为公交末班车是七点。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/lvyou/IMG_20200926_123156.jpg" alt="Alt text"><br><strong>第三天</strong><br>    早上可以到回民街吃个早饭，然后坐公交或者地铁到陕西历史博物馆（提前一周预约，免费的，不然真的预约不到啊）然后可以花三十块钱买一张大唐遗址陈列馆（好像是这个名字？忘了，不过不重要）的票，可以逛一二三四厅，这个就不要找讲解了，因为讲解是流水线操作，自己逛逛看看就好了，大概能够逛个三个小时左右。然后出来坐公交（自行高德导航）到永乐坊，买点吃的喝的边吃边逛，大概一到两个小时就够了，然后到大雁塔，门票40，有兴趣可以花钱买一张上塔的票（25块钱），可以到大雁塔上一观风景，晚上逛一下大唐不夜城，也是逛吃逛吃逛吃，慢悠悠的差不多能逛三四个小时。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/lvyou/IMG_20200927_123904.jpg" alt="Alt text"><br><strong>第四天</strong><br>    睡个懒觉，然后找个地方吃午饭，然后选择步行至北大街地铁口，乘坐1号线然后换乘4号线，在曲江池下，可以逛一下这个公园，还是挺大的，中午自己随便吃点，下午就可以去大唐芙蓉园瞅瞅（公众号免费预约门票，不要钱的），可以租一艘船，在湖面上看看芙蓉园的风景，如果想看晚上的夜景，那就只能下午六七点再进去了（或者待在里面不出来，哈哈哈哈），出来顺道逛一下不夜城，找点吃的再回去。</p><p><img src= "/img/loading.gif" data-lazy-src="/img/lvyou/IMG_20200928_134831.jpg" alt="Alt text"><br><strong>第五天</strong><br>    上午去回民街逛逛，看看有没有啥可以买的，出来一趟还是要买点东西，然后吃了午饭以后，就可以去机场或者高铁站打道回府了</p><p><strong>友情提示</strong><br>    以上所有景区门票对医护人员均实行免票制度，且可以带一个直系家属</p>]]></content>
      
      
      <categories>
          
          <category> 南风落尽 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 旅游 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 登录验证码</title>
      <link href="2020/09/24/java%20%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>2020/09/24/java%20%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>验证码的应用在目前来说是很广泛的，主要用于登录的时候进行相关验证方面，验证码的生成可以在前端做，也能在后端做，然后传给前端进行相应的操作</p></blockquote><blockquote><p>一，先新建一个CodeUtil用于进行验证码的生成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 验证码字符集</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] chars = &#123;</span><br><span class="line">            <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 字符数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 干扰线数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LINES = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">// 宽度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WIDTH = <span class="number">80</span>;</span><br><span class="line">    <span class="comment">// 高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HEIGHT = <span class="number">40</span>;</span><br><span class="line">    <span class="comment">// 字体大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FONT_SIZE = <span class="number">30</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机验证码及图片</span></span><br><span class="line"><span class="comment">     * Object[0]：验证码字符串；</span></span><br><span class="line"><span class="comment">     * Object[1]：验证码图片。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[] createImage() &#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="comment">// 1.创建空白图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(</span><br><span class="line">                WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">// 2.获取图片画笔</span></span><br><span class="line">        Graphics graphic = image.getGraphics();</span><br><span class="line">        <span class="comment">// 3.设置画笔颜色</span></span><br><span class="line">        graphic.setColor(Color.LIGHT_GRAY);</span><br><span class="line">        <span class="comment">// 4.绘制矩形背景</span></span><br><span class="line">        graphic.fillRect(<span class="number">0</span>, <span class="number">0</span>, WIDTH, HEIGHT);</span><br><span class="line">        <span class="comment">// 5.画随机字符</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;SIZE; i++) &#123;</span><br><span class="line">            <span class="comment">// 取随机字符索引</span></span><br><span class="line">            <span class="keyword">int</span> n = ran.nextInt(chars.length);</span><br><span class="line">            <span class="comment">// 设置随机颜色</span></span><br><span class="line">            graphic.setColor(getRandomColor());</span><br><span class="line">            <span class="comment">// 设置字体大小</span></span><br><span class="line">            graphic.setFont(<span class="keyword">new</span> Font(</span><br><span class="line">                    <span class="keyword">null</span>, Font.BOLD + Font.ITALIC, FONT_SIZE));</span><br><span class="line">            <span class="comment">// 画字符</span></span><br><span class="line">            graphic.drawString(</span><br><span class="line">                    chars[n] + <span class="string">&quot;&quot;</span>, i * WIDTH / SIZE, HEIGHT*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line">            <span class="comment">// 记录字符</span></span><br><span class="line">            sb.append(chars[n]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.画干扰线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LINES; i++) &#123;</span><br><span class="line">            <span class="comment">// 设置随机颜色</span></span><br><span class="line">            graphic.setColor(getRandomColor());</span><br><span class="line">            <span class="comment">// 随机画线</span></span><br><span class="line">            graphic.drawLine(ran.nextInt(WIDTH), ran.nextInt(HEIGHT),</span><br><span class="line">                    ran.nextInt(WIDTH), ran.nextInt(HEIGHT));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 7.返回验证码和图片</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object[]&#123;sb.toString(), image&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机取色</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">getRandomColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        Color color = <span class="keyword">new</span> Color(ran.nextInt(<span class="number">256</span>),</span><br><span class="line">                ran.nextInt(<span class="number">256</span>), ran.nextInt(<span class="number">256</span>));</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>二、新建一个接口，用于获取我们上面生成的验证码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取验证码</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getCode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一个参数是生成的验证码，第二个参数是生成的图片</span></span><br><span class="line">        Object[] objs = CodeUtil.createImage();</span><br><span class="line">        <span class="comment">//将生成的验证码发送到前端</span></span><br><span class="line">        String codes = (String) objs[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//将图片输出给浏览器</span></span><br><span class="line">        BufferedImage image = (BufferedImage) objs[<span class="number">1</span>];</span><br><span class="line">        ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImageIO.write(image, <span class="string">&quot;png&quot;</span>, out);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//            log.error(&quot;验证码错误:&quot; + e.getMessage());</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = out.toByteArray();</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;codes&quot;</span>, codes);</span><br><span class="line">        map.put(<span class="string">&quot;image&quot;</span>, bytes);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>三、由于是get请求，所以我们就直接用浏览器进行测试了，结果如下，返回的结果分别表示什么我就不再解释了</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200920151930232.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>注：如有需要，可自行转载，但是要加上原创作者及原文章链接哦…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 登录验证码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 获取图片相关数据</title>
      <link href="2020/09/24/java%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE/"/>
      <url>2020/09/24/java%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一般来说，现在的相机进行拍照都会带上相关的基本信息，包括拍照时间，大小等，前提是系统已经对相机等拍照软件进行了相关授权。我们可以使用通过下面的代码获取照片的相关信息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File jpegFile = <span class="keyword">new</span> File(<span class="string">&quot;E:\\20190425143833.jpg&quot;</span>);</span><br><span class="line">        Long fileTime = jpegFile.lastModified();</span><br><span class="line">        System.out.println(fileTime);</span><br><span class="line">        Metadata metadata;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            metadata = JpegMetadataReader.readMetadata(jpegFile);</span><br><span class="line">            Iterator&lt;Directory&gt; it = metadata.getDirectories().iterator();</span><br><span class="line">            <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">                Directory exif = it.next();</span><br><span class="line">                Iterator&lt;Tag&gt; tags = exif.getTags().iterator();</span><br><span class="line">                <span class="keyword">while</span> (tags.hasNext()) &#123;</span><br><span class="line">                    Tag tag = (Tag) tags.next();</span><br><span class="line">                    System.out.println(tag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JpegProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p> 注：如有需要，可自行转载，但是要加上原创作者及原文章链接哦…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 文件上传</title>
      <link href="2020/09/24/java%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2020/09/24/java%20%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文件上传在现在的功能需求中是很常见的，基本上所有的项目都会涉及到文件的上传，接下来就介绍文件处理当中的文件上传功能，仅仅是提供一个例子，希望对你们有所帮助</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">File</span><span class="params">(<span class="meta">@RequestParam(&quot;fileName&quot;)</span> MultipartFile file, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        Files files = <span class="keyword">new</span> Files();</span><br><span class="line">        <span class="comment">// 获取原始文件名</span></span><br><span class="line">        String fileName = file.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获取我们自己定义的文件名</span></span><br><span class="line">        String NewFileName = request.getParameter(<span class="string">&quot;NewFileName&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取后缀</span></span><br><span class="line">        String suffixName = fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">// 文件保存的路径</span></span><br><span class="line">        String filePath = <span class="string">&quot;F:/upload/&quot;</span>;</span><br><span class="line">        <span class="comment">// 对fileName处理，加上随机码，避免重复</span></span><br><span class="line"><span class="comment">//        String NewFileNames = filePath + UUID.randomUUID() + fileName;</span></span><br><span class="line"><span class="comment">//        String NewFileNames = filePath + UUID.randomUUID() + suffixName;</span></span><br><span class="line">        String NewFileNames = UUID.randomUUID() + <span class="string">&quot;-&quot;</span> + fileName;</span><br><span class="line">        <span class="comment">// 文件存储路径</span></span><br><span class="line">        File dest = <span class="keyword">new</span> File(filePath + NewFileNames);</span><br><span class="line">        <span class="comment">// 判断文件路径是否存在，不存在就创建路径</span></span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">            dest.getParentFile().mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(dest);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;http://127.0.0.1:8080/html/file/files.html&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传失败，请返回页面重新上传！&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p> 注：如有需要，可自行转载，但是要加上原创作者及原文章链接哦…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 文件复制</title>
      <link href="2020/09/24/java%20%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/"/>
      <url>2020/09/24/java%20%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在现在的功能需求中，文件的处理基本上都是会涉及到的，应该说是一个很常用的功能，接下来就介绍文件处理当中的文件复制功能，很少的代码实现常用的功能。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;test.txt&quot;</span>;</span><br><span class="line">        String suffixName = url.substring(url.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//获取要复制的文件路径</span></span><br><span class="line">        FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;F:\\&quot;</span> + url);</span><br><span class="line">        String filePath = <span class="string">&quot;F:\\test\\&quot;</span>;</span><br><span class="line">        File dest = <span class="keyword">new</span> File(filePath+System.currentTimeMillis());</span><br><span class="line">        <span class="comment">// 判断文件路径是否存在，不存在就创建路径</span></span><br><span class="line">        <span class="keyword">if</span> (!dest.getParentFile().exists()) &#123;</span><br><span class="line">            dest.getParentFile().mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取要写入的文件路径</span></span><br><span class="line">        FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(dest + suffixName);</span><br><span class="line">        <span class="comment">//获取要复制的的文件通道</span></span><br><span class="line">        FileChannel fileChannelInput = fileInputStream.getChannel();</span><br><span class="line">        <span class="comment">//获取要写入的文件通道</span></span><br><span class="line">        FileChannel fileChannelOutput = fileOutputStream.getChannel();</span><br><span class="line">        <span class="comment">// 将要复制文件通道的数据，写入到要写入的文件通道</span></span><br><span class="line">        fileChannelInput.transferTo(<span class="number">0</span>, fileChannelInput.size(), fileChannelOutput);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (fileInputStream != <span class="keyword">null</span>)&#123;</span><br><span class="line">                fileInputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fileChannelInput != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fileChannelInput.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fileOutputStream != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fileOutputStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fileChannelOutput != <span class="keyword">null</span>) &#123;</span><br><span class="line">                fileChannelOutput.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：如有需要，可自行转载，但是要加上原创作者及原文章链接哦…</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk下载及环境变量配置</title>
      <link href="2020/09/24/jdk%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
      <url>2020/09/24/jdk%E4%B8%8B%E8%BD%BD%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>一、jdk的下载</strong><br>1、jdk下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">点击打开链接</a>  我们根据自己的需要选择相应版本的jdk进行下载。</p><p>下载好以后我们找到安装包进行安装，安装路径课根据自己的喜好进行调整，注意，安装的时候会依次出现两次安装，第一次是jdk的安装，第二次是jre的安装，建议两个不要放在同一个目录下。（安装很简单，就不截图啦！）</p><p><strong>二、在安装好以后，接下来就该配置环境变量了。</strong></p><p>1、右键点击计算机→属性→高级系统设置→高级→环境变量</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200919155814839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">注：一般java_home、classpath、path都配置在系统变量中。</p><p>2、配置JAVA_HOME变量</p><p>系统变量→新建 JAVA_HOME 变量 。变量值填写jdk的安装目录（我是配置到用户变量中的，建议配置到系统变量中）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020091915584747.png#pic_center" alt="在这里插入图片描述"><br>3、配置path变量</p><p>系统变量→寻找 Path 变量→编辑</p><p>在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;  注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的变量代码。（注意：英文字符下的;号）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200919155906499.png#pic_center" alt="在这里插入图片描述"><br>4、配置CLASSPATH 变量</p><p>系统变量→新建 CLASSPATH 变量</p><p>变量值填写   .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（注意最前面有一个点）</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200919155945413.png#pic_center" alt="在这里插入图片描述"><br>5、jdk的环境变量配置完毕，接下来我们使用cmd命令窗口来检查是否成功。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200919160008399.png#pic_center" alt="在这里插入图片描述"><br>如上图所示，输入 java -version （java 和 -version 之间有空格），当窗口中出现自己安装的jdk版本号则表示安装成功。当然，也可以通过输入Java 或者 javac 来进行检查。</p><p>5.1、命令窗口输入java  附图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200919160041990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>5.2、命令窗口输入javac  附图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20200919160055754.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d6cDEyMzIx,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>自此jdk的安装及检验就全部完成。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
